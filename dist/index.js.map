{"version":3,"file":"index.js","mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,sB,QCAzBF,EAAOC,QAAUC,QAAQ,sB,QCAzBF,EAAOC,QAAUC,QAAQ,qB,QCAzBF,EAAOC,QAAUC,QAAQ,kBCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,uPCrBf,OACA,aACA,SACA,SAgCA,SAASQ,EAAmBC,GAC1B,GAA0B,iBAAfA,EACT,MAAM,IAAI,EAAAC,mBAAmB,4BAG/B,GAAIC,OAAOC,KAAKH,EAAY,OAAOI,SAAS,SAAWJ,EACrD,MAAM,IAAI,EAAAC,mBAAmB,iCAG/B,GAA6C,KAAzCC,OAAOG,WAAWL,EAAY,OAChC,MAAM,IAAI,EAAAC,mBAAmB,wBAAwBD,GAGvD,GAAI,EAAAM,OAAO,sEAAwEN,EACjF,MAAM,IAAI,EAAAC,mBAAmB,wBAAwBD,EAAU,wBAInE,SAASO,EAAeC,GACtB,GAAsB,iBAAXA,EACT,MAAM,IAAI,EAAAP,mBAAmB,uBAG/B,GAAIC,OAAOC,KAAKK,EAAQ,OAAOJ,SAAS,SAAWI,EACjD,MAAM,IAAI,EAAAP,mBAAmB,4BAI/B,GAA0B,KADPC,OAAOC,KAAKK,EAAQ,OACxBC,OACb,MAAM,IAAI,EAAAR,mBAAmB,uBA0B/B,EAAAS,gBArFF,SAAyBC,GACvB,MAAuB,iBAAZA,EAA6BA,EAC5BA,EAAQA,SAkFpB,EAAAC,MA/EF,SAAeC,GACb,OAAO,IAAIC,SAAQ,SAACC,GAAY,OAAAC,WAAWD,EAASF,OAgFpD,EAAAI,kBA7EF,WACE,OAAO,IAAIH,SAAQ,SAACC,GAAY,OAAAG,aAAaH,OA6E7C,EAAAI,qBA1EF,SAA8BC,EAAcC,GAI1C,OAHAD,EAAOA,GAAQA,EAAKE,kBACZD,GAASA,EAAMC,gBAyEvB,EAAAC,cApEF,SAAuBC,GACrB,IAAK,EAAAC,UAAUC,YAAYF,GACzB,MAAM,IAAIG,MAAM,kBAAkBH,GAGpC,GAAIA,EAAMI,IAAI,GACZ,MAAM,IAAID,MAAM,kBAAkBH,IAgEpC,EAAAzB,mBAAAA,EADA,EAAAQ,eAAAA,EAEA,EAAAsB,sBA5BF,SAA+BrB,EAAgBR,GAK7C,GAJAO,EAAeC,GACfT,EAAmBC,IAEQE,OAAOC,KAAK,EAAAG,OAAOE,GAAS,OAC/BsB,OAAO5B,OAAOC,KAAKH,EAAY,QACrD,MAAM,IAAI,EAAAC,mBAAmB,wDAAwDD,IAuBvF,EAAA+B,mBAnBF,SAA4BC,GAC1B,GAAIC,MAAMD,GACR,MAAM,IAAI,EAAAE,uBAAuB,4BAA4BF,GAG/D,GAAIA,EAAa,KAAaA,EAAa,KACzC,MAAM,IAAI,EAAAE,uBAAuB,sCAAsCF,K","sources":["webpack://@liquality/utils/external commonjs \"@liquality/crypto\"","webpack://@liquality/utils/external commonjs \"@liquality/errors\"","webpack://@liquality/utils/external commonjs \"@liquality/types\"","webpack://@liquality/utils/external commonjs \"setimmediate\"","webpack://@liquality/utils/webpack/bootstrap","webpack://@liquality/utils/./lib/index.ts"],"sourcesContent":["module.exports = require(\"@liquality/crypto\");","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"setimmediate\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import 'setimmediate'\nimport { InvalidSecretError, InvalidExpirationError } from '@liquality/errors'\nimport { sha256 } from '@liquality/crypto'\nimport { BigNumber, Address } from '@liquality/types'\n\nfunction addressToString(address: Address | string): string {\n  if (typeof address === 'string') return address\n  else return address.address\n}\n\nfunction sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nfunction asyncSetImmediate() {\n  return new Promise((resolve) => setImmediate(resolve))\n}\n\nfunction caseInsensitiveEqual(left: string, right: string) {\n  left = left && left.toLowerCase()\n  right = right && right.toLowerCase()\n\n  return left === right\n}\n\nfunction validateValue(value: BigNumber) {\n  if (!BigNumber.isBigNumber(value)) {\n    throw new Error(`Invalid value: ${value}`)\n  }\n\n  if (value.lte(0)) {\n    throw new Error(`Invalid value: ${value}`)\n  }\n}\n\nfunction validateSecretHash(secretHash: string) {\n  if (typeof secretHash !== 'string') {\n    throw new InvalidSecretError(`Invalid secret hash type`)\n  }\n\n  if (Buffer.from(secretHash, 'hex').toString('hex') !== secretHash) {\n    throw new InvalidSecretError(`Invalid secret hash. Not Hex.`)\n  }\n\n  if (Buffer.byteLength(secretHash, 'hex') !== 32) {\n    throw new InvalidSecretError(`Invalid secret hash: ${secretHash}`)\n  }\n\n  if (sha256('0000000000000000000000000000000000000000000000000000000000000000') === secretHash) {\n    throw new InvalidSecretError(`Invalid secret hash: ${secretHash}. Secret 0 detected.`)\n  }\n}\n\nfunction validateSecret(secret: string) {\n  if (typeof secret !== 'string') {\n    throw new InvalidSecretError(`Invalid secret type`)\n  }\n\n  if (Buffer.from(secret, 'hex').toString('hex') !== secret) {\n    throw new InvalidSecretError(`Invalid secret. Not Hex.`)\n  }\n\n  const secretBuff = Buffer.from(secret, 'hex')\n  if (secretBuff.length !== 32) {\n    throw new InvalidSecretError(`Invalid secret size`)\n  }\n}\n\nfunction validateSecretAndHash(secret: string, secretHash: string) {\n  validateSecret(secret)\n  validateSecretHash(secretHash)\n\n  const computedSecretHash = Buffer.from(sha256(secret), 'hex')\n  if (!computedSecretHash.equals(Buffer.from(secretHash, 'hex'))) {\n    throw new InvalidSecretError(`Invalid secret: Does not match expected secret hash: ${secretHash}`)\n  }\n}\n\nfunction validateExpiration(expiration: number) {\n  if (isNaN(expiration)) {\n    throw new InvalidExpirationError(`Invalid expiration. NaN: ${expiration}`)\n  }\n\n  if (expiration < 500000000 || expiration > 5000000000000) {\n    throw new InvalidExpirationError(`Invalid expiration. Out of bounds: ${expiration}`)\n  }\n}\n\nexport {\n  sleep,\n  addressToString,\n  asyncSetImmediate,\n  caseInsensitiveEqual,\n  validateValue,\n  validateSecret,\n  validateSecretHash,\n  validateSecretAndHash,\n  validateExpiration\n}\n"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","validateSecretHash","secretHash","InvalidSecretError","Buffer","from","toString","byteLength","sha256","validateSecret","secret","length","addressToString","address","sleep","ms","Promise","resolve","setTimeout","asyncSetImmediate","setImmediate","caseInsensitiveEqual","left","right","toLowerCase","validateValue","value","BigNumber","isBigNumber","Error","lte","validateSecretAndHash","equals","validateExpiration","expiration","isNaN","InvalidExpirationError"],"sourceRoot":""}