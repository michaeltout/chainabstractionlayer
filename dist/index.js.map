{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/verus-utils/./lib/index.ts","webpack://@liquality/verus-utils/external commonjs \"@bitgo/utxo-lib\"","webpack://@liquality/verus-utils/external commonjs \"@liquality/bitcoin-networks\"","webpack://@liquality/verus-utils/external commonjs \"@liquality/crypto\"","webpack://@liquality/verus-utils/external commonjs \"@liquality/errors\"","webpack://@liquality/verus-utils/external commonjs \"@liquality/types\"","webpack://@liquality/verus-utils/external commonjs \"@liquality/utils\"","webpack://@liquality/verus-utils/external commonjs \"bignumber.js\"","webpack://@liquality/verus-utils/external commonjs \"bip174/src/lib/converter/varint\"","webpack://@liquality/verus-utils/external commonjs \"bitcoinjs-lib\"","webpack://@liquality/verus-utils/external commonjs \"bitcoinjs-lib/src/classify\"","webpack://@liquality/verus-utils/external commonjs \"coinselect\"","webpack://@liquality/verus-utils/external commonjs \"coinselect/accumulative\"","webpack://@liquality/verus-utils/external commonjs \"lodash\"","webpack://@liquality/verus-utils/webpack/bootstrap","webpack://@liquality/verus-utils/webpack/startup"],"sourcesContent":["import { base58, padHexStart } from '@liquality/crypto'\nimport { BitcoinNetworks, BitcoinNetwork } from '@liquality/bitcoin-networks'\nimport { Address, Transaction, verus as vT, TxStatus } from '@liquality/types'\nimport { addressToString } from '@liquality/utils'\nimport { InvalidAddressError } from '@liquality/errors'\n\nimport { findKey } from 'lodash'\nimport BigNumber from 'bignumber.js'\nimport * as bitcoin from 'bitcoinjs-lib'\nimport * as classify from 'bitcoinjs-lib/src/classify'\nimport * as varuint from 'bip174/src/lib/converter/varint'\nimport coinselect from 'coinselect'\nimport coinselectAccumulative from 'coinselect/accumulative'\n\nconst verus = require('@bitgo/utxo-lib') // eslint-disable-line\n\nconst AddressTypes = ['legacy', 'p2sh-segwit', 'bech32']\n\nfunction calculateFee(numInputs: number, numOutputs: number, feePerByte: number) {\n  return (numInputs * 148 + numOutputs * 34 + 10) * feePerByte\n}\n\n/**\n * Get compressed pubKey from pubKey.\n * @param {!string} pubKey - 65 byte string with prefix, x, y.\n * @return {string} Returns the compressed pubKey of uncompressed pubKey.\n */\nfunction compressPubKey(pubKey: string) {\n  const x = pubKey.substring(2, 66)\n  const y = pubKey.substring(66, 130)\n  const even = parseInt(y.substring(62, 64), 16) % 2 === 0\n  const prefix = even ? '02' : '03'\n\n  return prefix + x\n}\n\n/**\n * Get a network object from an address\n * @param {string} address The bitcoin address\n * @return {Network}\n */\nfunction getAddressNetwork(address: string) {\n  // TODO: can this be simplified using just bitcoinjs-lib??\n  let networkKey\n  // bech32\n  networkKey = findKey(BitcoinNetworks, (network) => address.startsWith(network.bech32))\n  // base58\n  if (!networkKey) {\n    const prefix = base58.decode(address).toString('hex').substring(0, 2)\n    networkKey = findKey(BitcoinNetworks, (network) => {\n      const pubKeyHashPrefix = padHexStart(network.pubKeyHash.toString(16), 1)\n      const scriptHashPrefix = padHexStart(network.scriptHash.toString(16), 1)\n      return [pubKeyHashPrefix, scriptHashPrefix].includes(prefix)\n    })\n  }\n  return (BitcoinNetworks as { [key: string]: BitcoinNetwork })[networkKey]\n}\n\ntype CoinSelectTarget = {\n  value: number\n  script?: Buffer\n  id?: string\n}\n\ntype CoinSelectResponse = {\n  inputs: vT.UTXO[]\n  outputs: CoinSelectTarget[]\n  change: CoinSelectTarget\n  fee: number\n}\n\ntype CoinSelectFunction = (utxos: vT.UTXO[], targets: CoinSelectTarget[], feePerByte: number) => CoinSelectResponse\n\nfunction selectCoins(utxos: vT.UTXO[], targets: CoinSelectTarget[], feePerByte: number, fixedInputs: vT.UTXO[] = []) {\n  let selectUtxos = utxos\n\n  // Default coinselect won't accumulate some inputs\n  // TODO: does coinselect need to be modified to ABSOLUTELY not skip an input?\n  const coinselectStrat: CoinSelectFunction = fixedInputs.length ? coinselectAccumulative : coinselect\n  if (fixedInputs.length) {\n    selectUtxos = [\n      // Order fixed inputs to the start of the list so they are used\n      ...fixedInputs,\n      ...utxos.filter((utxo) => !fixedInputs.find((input) => input.vout === utxo.vout && input.txid === utxo.txid))\n    ]\n  }\n\n  const { inputs, outputs, fee } = coinselectStrat(selectUtxos, targets, Math.ceil(feePerByte))\n\n  let change\n  if (inputs && outputs) {\n    change = outputs.find((output) => output.id !== 'main')\n  }\n\n  return { inputs, outputs, fee, change }\n}\n\nconst OUTPUT_TYPES_MAP = {\n  [classify.types.P2WPKH]: 'witness_v0_keyhash',\n  [classify.types.P2WSH]: 'witness_v0_scripthash'\n}\n\nfunction decodeRawTransaction(hex: string, network: BitcoinNetwork = verus.networks.verus): vT.Transaction {\n  const vBitgoTx = verus.Transaction.fromHex(hex, network)\n\n  const vin = vBitgoTx.ins.map(\n    (input: { hash: Buffer; index: number; script: Buffer; sequence: number; witness: Buffer[] }) => {\n      return <vT.Input>{\n        txid: Buffer.from(input.hash).reverse().toString('hex'),\n        vout: input.index,\n        scriptSig: {\n          asm: verus.script.toASM(input.script),\n          hex: input.script.toString('hex')\n        },\n        txinwitness: input.witness.map((w) => w.toString('hex')),\n        sequence: input.sequence\n      }\n    }\n  )\n\n  const vout = vBitgoTx.outs.map(\n    (\n      output: {\n        script: Buffer\n        value: number\n      },\n      n: number\n    ) => {\n      const type = classify.output(output.script)\n\n      const vout: vT.Output = {\n        value: output.value / 1e8,\n        n,\n        scriptPubKey: {\n          asm: verus.script.toASM(output.script),\n          hex: output.script.toString('hex'),\n          reqSigs: 1, // TODO: not sure how to derive this\n          type: OUTPUT_TYPES_MAP[type] || type,\n          addresses: []\n        }\n      }\n\n      try {\n        const address = verus.address.fromOutputScript(output.script, network)\n        vout.scriptPubKey.addresses.push(address)\n      } catch (e) {\n        /** If output script is not parasable, we just skip it */\n      }\n\n      return vout\n    }\n  )\n\n  return {\n    txid: vBitgoTx.getId(),\n    hash: vBitgoTx.getId(),\n    version: vBitgoTx.version,\n    locktime: vBitgoTx.locktime,\n    vin,\n    vout,\n    hex\n  }\n}\n\nfunction normalizeTransactionObject(\n  tx: vT.Transaction,\n  fee: number,\n  block?: { number: number; hash: string }\n): Transaction<vT.Transaction> {\n  const value = tx.vout.reduce((p, n) => p.plus(new BigNumber(n.value).times(1e8)), new BigNumber(0))\n  const result = {\n    hash: tx.txid,\n    value: value.toNumber(),\n    _raw: { ...tx, size: tx.hex.length / 2, hash: tx.txid },\n    confirmations: 0,\n    status: tx.confirmations > 0 ? TxStatus.Success : TxStatus.Pending\n  }\n\n  if (fee) {\n    const feePrice = Math.round(fee / tx.hex.length)\n    Object.assign(result, {\n      fee,\n      feePrice\n    })\n  }\n\n  if (block) {\n    Object.assign(result, {\n      blockHash: block.hash,\n      blockNumber: block.number,\n      confirmations: tx.confirmations\n    })\n  }\n\n  return result\n}\n\n// TODO: This is copy pasta because it's not exported from bitcoinjs-lib\n// https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/test/integration/csv.spec.ts#L477\nfunction witnessStackToScriptWitness(witness: Buffer[]): Buffer {\n  let buffer = Buffer.allocUnsafe(0)\n\n  function writeSlice(slice: Buffer): void {\n    buffer = Buffer.concat([buffer, Buffer.from(slice)])\n  }\n\n  function writeVarInt(i: number): void {\n    const currentLen = buffer.length\n    const varintLen = varuint.encodingLength(i)\n\n    buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)])\n    varuint.encode(i, buffer, currentLen)\n  }\n\n  function writeVarSlice(slice: Buffer): void {\n    writeVarInt(slice.length)\n    writeSlice(slice)\n  }\n\n  function writeVector(vector: Buffer[]): void {\n    writeVarInt(vector.length)\n    vector.forEach(writeVarSlice)\n  }\n\n  writeVector(witness)\n\n  return buffer\n}\n\nfunction getPubKeyHash(address: string, network: BitcoinNetwork) {\n  const outputScript = bitcoin.address.toOutputScript(address, network)\n  const type = classify.output(outputScript)\n  if (![classify.types.P2PKH, classify.types.P2WPKH].includes(type)) {\n    throw new Error(\n      `Bitcoin swap doesn't support the address ${address} type of ${type}. Not possible to derive public key hash.`\n    )\n  }\n\n  try {\n    const bech32 = bitcoin.address.fromBech32(address)\n    return bech32.data\n  } catch (e) {\n    const base58 = bitcoin.address.fromBase58Check(address)\n    return base58.hash\n  }\n}\n\nfunction validateAddress(_address: Address | string, network: BitcoinNetwork) {\n  const address = addressToString(_address)\n\n  if (typeof address !== 'string') {\n    throw new InvalidAddressError(`Invalid address: ${address}`)\n  }\n\n  let pubKeyHash\n  try {\n    pubKeyHash = getPubKeyHash(address, network)\n  } catch (e) {\n    throw new InvalidAddressError(`Invalid Address. Failed to parse: ${address}`)\n  }\n\n  if (!pubKeyHash) {\n    throw new InvalidAddressError(`Invalid Address: ${address}`)\n  }\n}\n\nexport {\n  calculateFee,\n  compressPubKey,\n  getAddressNetwork,\n  CoinSelectTarget,\n  selectCoins,\n  decodeRawTransaction,\n  normalizeTransactionObject,\n  witnessStackToScriptWitness,\n  AddressTypes,\n  getPubKeyHash,\n  validateAddress\n}\n","module.exports = require(\"@bitgo/utxo-lib\");","module.exports = require(\"@liquality/bitcoin-networks\");","module.exports = require(\"@liquality/crypto\");","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"bip174/src/lib/converter/varint\");","module.exports = require(\"bitcoinjs-lib\");","module.exports = require(\"bitcoinjs-lib/src/classify\");","module.exports = require(\"coinselect\");","module.exports = require(\"coinselect/accumulative\");","module.exports = require(\"lodash\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["verus","AddressTypes","calculateFee","numInputs","numOutputs","feePerByte","compressPubKey","pubKey","x","substring","y","parseInt","getAddressNetwork","address","networkKey","findKey","BitcoinNetworks","network","startsWith","bech32","base58","decode","toString","padHexStart","pubKeyHash","scriptHash","includes","selectCoins","utxos","targets","fixedInputs","selectUtxos","coinselectStrat","length","filter","utxo","find","input","vout","txid","change","Math","ceil","inputs","outputs","fee","output","id","OUTPUT_TYPES_MAP","classify","types","P2WPKH","P2WSH","getPubKeyHash","outputScript","bitcoin","toOutputScript","type","P2PKH","Error","fromBech32","data","e","fromBase58Check","hash","decodeRawTransaction","hex","networks","vBitgoTx","Transaction","fromHex","vin","ins","map","Buffer","from","reverse","index","scriptSig","asm","script","toASM","txinwitness","witness","w","sequence","outs","n","value","scriptPubKey","reqSigs","addresses","fromOutputScript","push","getId","version","locktime","normalizeTransactionObject","tx","block","reduce","p","plus","times","result","toNumber","_raw","size","confirmations","status","TxStatus","Success","Pending","feePrice","round","Object","assign","blockHash","blockNumber","number","witnessStackToScriptWitness","vector","buffer","allocUnsafe","writeVarInt","i","currentLen","varintLen","varuint","encodingLength","concat","encode","forEach","slice","writeSlice","validateAddress","_address","addressToString","InvalidAddressError","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}