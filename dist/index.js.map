{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/verus-rpc-provider/./lib/VerusRpcProvider.ts","webpack://@liquality/verus-rpc-provider/./lib/index.ts","webpack://@liquality/verus-rpc-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/verus-rpc-provider/external commonjs \"@liquality/jsonrpc-provider\"","webpack://@liquality/verus-rpc-provider/external commonjs \"@liquality/types\"","webpack://@liquality/verus-rpc-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/verus-rpc-provider/external commonjs \"@liquality/verus-utils\"","webpack://@liquality/verus-rpc-provider/external commonjs \"lodash\"","webpack://@liquality/verus-rpc-provider/webpack/bootstrap","webpack://@liquality/verus-rpc-provider/webpack/startup"],"sourcesContent":["import { JsonRpcProvider } from '@liquality/jsonrpc-provider'\nimport { addressToString } from '@liquality/utils'\nimport { normalizeTransactionObject, decodeRawTransaction } from '@liquality/verus-utils'\nimport { TxNotFoundError, BlockNotFoundError } from '@liquality/errors'\nimport { VerusNetwork } from '@liquality/verus-networks'\nimport { verus, Transaction, Block, ChainProvider, SendOptions, Address, BigNumber } from '@liquality/types'\n\nimport { flatten } from 'lodash'\n\ninterface ProviderOptions {\n  // RPC URI\n  uri: string\n  // Authentication username\n  username?: string\n  // Authentication password\n  password?: string\n  // Verus network\n  network: VerusNetwork\n  // Number of block confirmations to target for fee. Defaul: 1\n  feeBlockConfirmations?: number\n  // Default fee per byte for transactions. Default: 3\n  defaultFeePerByte?: number\n}\n\nexport default class VerusRpcProvider extends JsonRpcProvider implements Partial<ChainProvider> {\n  _feeBlockConfirmations: number\n  _defaultFeePerByte: number\n  _network: VerusNetwork\n  _usedAddressCache: { [key: string]: boolean }\n\n  constructor(options: ProviderOptions) {\n    const { uri, username, password, network, feeBlockConfirmations = 1, defaultFeePerByte = 3 } = options\n    super(uri, username, password)\n    this._network = network\n    this._feeBlockConfirmations = feeBlockConfirmations\n    this._defaultFeePerByte = defaultFeePerByte\n    this._usedAddressCache = {}\n  }\n\n  async decodeRawTransaction(rawTransaction: string): Promise<verus.Transaction> {\n    return this.jsonrpc('decoderawtransaction', rawTransaction)\n  }\n\n  async getFeePerByte(numberOfBlocks = this._feeBlockConfirmations) {\n    try {\n      const fee = await this.jsonrpc('estimatefee', numberOfBlocks)\n\n      if (fee && fee > 0) {\n        // Get satoshis per byte (* 100000000 / 1000)\n        return new BigNumber(fee).times(1e5).toNumber()\n      }\n\n      throw new Error('Invalid estimated fee')\n    } catch (e) {\n      return this._defaultFeePerByte\n    }\n  }\n\n  async getMinRelayFee() {\n    const { relayfee } = await this.jsonrpc('getnetworkinfo')\n    return (relayfee * 1e8) / 1000\n  }\n\n  async getBalance(_addresses: (string | Address)[]) {\n    const addresses = _addresses.map(addressToString)\n    const _utxos = await this.getUnspentTransactions(addresses)\n    const utxos = flatten(_utxos)\n\n    return utxos.reduce((acc, utxo) => acc.plus(utxo.value), new BigNumber(0))\n  }\n\n  async getUnspentTransactions(_addresses: (Address | string)[]): Promise<verus.UTXO[]> {\n    const addresses = _addresses.map(addressToString)\n    const addressUtxoResponse = await this.jsonrpc('getaddressutxos', { addresses, chainInfo: true })\n\n    return addressUtxoResponse.utxos.map((utxo: { [key: string]: any }) => {\n      return {\n        txid: utxo.txid,\n        vout: utxo.outputIndex,\n        address: utxo.address,\n        scriptPubKey: utxo.script,\n        amount: new BigNumber(utxo.satoshis).dividedBy(1e8).toNumber(),\n        value: utxo.satoshis,\n        confirmations: addressUtxoResponse.height - utxo.height\n      }\n    })\n  }\n\n  async getAddressDeltas(_addresses: (Address | string)[]) {\n    const addresses = _addresses.map(addressToString)\n    const addressDeltas: verus.rpc.AddressDelta[] = await this.jsonrpc('getaddressdeltas', { addresses })\n    const deltasFormatted: verus.AddressDeltas = {}\n\n    for (const address of addresses) {\n      deltasFormatted[address] = []\n    }\n\n    for (const delta of addressDeltas) {\n      if (deltasFormatted[delta.address]) deltasFormatted[delta.address].push(delta)\n      else deltasFormatted[delta.address] = [delta]\n    }\n\n    return deltasFormatted\n  }\n\n  async getReceivedByAddress(address: string): Promise<number> {\n    return this.jsonrpc('getreceivedbyaddress', address)\n  }\n\n  async importAddresses(addresses: string[]) {\n    const request = addresses.map((address) => ({ scriptPubKey: { address }, timestamp: 0 }))\n    return this.jsonrpc('importmulti', request)\n  }\n\n  async getTransactionHex(transactionHash: string): Promise<string> {\n    return this.jsonrpc('getrawtransaction', transactionHash)\n  }\n\n  async generateBlock(numberOfBlocks: number): Promise<void> {\n    let lastLongest = -1\n    let blocksPassed = 0\n\n    return new Promise((resolve, reject) => {\n      // Actually waits for new block(s)\n      const infoInterval = setInterval(async () => {\n        try {\n          const { longestchain } = await this.jsonrpc('getinfo')\n\n          if (lastLongest === -1) lastLongest = longestchain\n          else if (longestchain > lastLongest) {\n            blocksPassed += longestchain - lastLongest\n            lastLongest = longestchain\n          }\n\n          if (blocksPassed >= numberOfBlocks) {\n            clearInterval(infoInterval)\n            resolve(null)\n          }\n        } catch (e) {\n          clearInterval(infoInterval)\n          reject(e)\n        }\n      }, 1000)\n    })\n  }\n\n  async getBlockByHash(blockHash: string, includeTx = false): Promise<Block> {\n    let data: verus.rpc.Block\n\n    try {\n      data = await this.jsonrpc('getblock', blockHash) // TODO: This doesn't fit the interface?: https://chainquery.com/bitcoin-cli/getblock\n    } catch (e) {\n      if (e.name === 'NodeError' && e.message.includes('Block not found')) {\n        const { name, message, ...attrs } = e\n        throw new BlockNotFoundError(`Block not found: ${blockHash}`, attrs)\n      }\n\n      throw e\n    }\n\n    const {\n      hash,\n      height: number,\n      time: timestamp,\n      difficulty,\n      size,\n      previousblockhash: parentHash,\n      nonce,\n      tx: transactionHashes\n    } = data\n\n    let transactions: any[] = transactionHashes\n    // TODO: Why transactions need to be retrieved individually? getblock has verbose 2 https://chainquery.com/bitcoin-cli/getblock\n    if (includeTx) {\n      const txs = transactionHashes.map((hash) => this.getTransactionByHash(hash))\n      transactions = await Promise.all(txs)\n    }\n\n    return {\n      hash,\n      number,\n      timestamp,\n      difficulty: parseFloat(new BigNumber(difficulty).toFixed()),\n      size,\n      parentHash,\n      nonce,\n      transactions\n    }\n  }\n\n  async getBlockByNumber(blockNumber: number, includeTx = false) {\n    let blockHash\n\n    try {\n      blockHash = await this.jsonrpc('getblockhash', blockNumber)\n    } catch (e) {\n      if (e.name === 'NodeError' && e.message.includes('Block height out of range')) {\n        const { name, message, ...attrs } = e\n        throw new BlockNotFoundError(`Block not found: ${blockNumber}`, attrs)\n      }\n\n      throw e\n    }\n\n    return this.getBlockByHash(blockHash, includeTx)\n  }\n\n  async getBlockHeight() {\n    return this.jsonrpc('getblockcount')\n  }\n\n  async getTransactionByHash(transactionHash: string) {\n    try {\n      const tx = await this.getParsedTransactionByHash(transactionHash, true)\n      return tx\n    } catch (e) {\n      if (e.name === 'NodeError' && e.message.includes('No such mempool transaction')) {\n        const { name, message, ...attrs } = e\n        throw new TxNotFoundError(`Transaction not found: ${transactionHash}`, attrs)\n      }\n\n      throw e\n    }\n  }\n\n  async getTransactionFee(tx: verus.Transaction) {\n    const isCoinbaseTx = tx.vin.find((vin) => vin.coinbase)\n    if (isCoinbaseTx) return // Coinbase transactions do not have a fee\n\n    const inputs = tx.vin.map((vin) => ({ txid: vin.txid, vout: vin.vout }))\n    const inputTransactions = await Promise.all(inputs.map((input) => this.jsonrpc('getrawtransaction', input.txid, 1)))\n\n    const inputValues = inputTransactions.map((inputTx, index) => {\n      const vout = inputs[index].vout\n      const output = inputTx.vout[vout]\n      return output.value * 1e8\n    })\n    const inputValue = inputValues.reduce((a, b) => a.plus(new BigNumber(b)), new BigNumber(0))\n    const outputValue = tx.vout.reduce(\n      (a, b) => a.plus(new BigNumber(b.value).times(new BigNumber(1e8))),\n      new BigNumber(0)\n    )\n    const feeValue = inputValue.minus(outputValue)\n    return feeValue.toNumber()\n  }\n\n  async getParsedTransactionByHash(transactionHash: string, addFees = false): Promise<Transaction<verus.Transaction>> {\n    const tx: verus.rpc.MinedTransaction = await this.jsonrpc('getrawtransaction', transactionHash, 1)\n    return normalizeTransactionObject(\n      tx,\n      addFees ? await this.getTransactionFee(tx) : undefined,\n      tx.confirmations > 0 ? await this.getBlockByHash(tx.blockhash) : undefined\n    )\n  }\n\n  async getRawTransactionByHash(transactionHash: string) {\n    const tx: string = await this.jsonrpc('getrawtransaction', transactionHash, 0)\n    return tx\n  }\n\n  async sendRawTransaction(rawTransaction: string): Promise<string> {\n    return this.jsonrpc('sendrawtransaction', rawTransaction)\n  }\n\n  async sendBatchTransaction(transactions: SendOptions[]) {\n    const outputs: { [index: string]: number } = {}\n    for (const tx of transactions) {\n      outputs[addressToString(tx.to)] = new BigNumber(tx.value).dividedBy(1e8).toNumber()\n    }\n    const rawTxOutputs = await this.createRawTransaction([], outputs)\n    const rawTxFunded = await this.fundRawTransaction(rawTxOutputs)\n    const rawTxSigned = await this.signRawTransaction(rawTxFunded.hex)\n    const fee = new BigNumber(rawTxFunded.fee).times(1e8).toNumber()\n    await this.sendRawTransaction(rawTxSigned.hex)\n    return normalizeTransactionObject(decodeRawTransaction(rawTxSigned.hex, this._network), fee)\n  }\n\n  async signRawTransaction(hexstring: string) {\n    return this.jsonrpc('signrawtransaction', hexstring)\n  }\n\n  async createRawTransaction(transactions: [], outputs: { [index: string]: number }): Promise<string> {\n    return this.jsonrpc('createrawtransaction', transactions, outputs)\n  }\n\n  async fundRawTransaction(hexstring: string): Promise<verus.rpc.FundRawResponse> {\n    return this.jsonrpc('fundrawtransaction', hexstring)\n  }\n}\n","import VerusRpcProvider from './VerusRpcProvider'\n\nexport { VerusRpcProvider }\n","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/jsonrpc-provider\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"@liquality/verus-utils\");","module.exports = require(\"lodash\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["options","uri","username","password","network","feeBlockConfirmations","defaultFeePerByte","_network","_feeBlockConfirmations","_defaultFeePerByte","_usedAddressCache","decodeRawTransaction","rawTransaction","this","jsonrpc","getFeePerByte","numberOfBlocks","fee","BigNumber","times","toNumber","Error","getMinRelayFee","getBalance","_addresses","addresses","map","addressToString","getUnspentTransactions","_utxos","flatten","reduce","acc","utxo","plus","value","chainInfo","addressUtxoResponse","utxos","txid","vout","outputIndex","address","scriptPubKey","script","amount","satoshis","dividedBy","confirmations","height","getAddressDeltas","addressDeltas","deltasFormatted","delta","push","getReceivedByAddress","importAddresses","request","timestamp","getTransactionHex","transactionHash","generateBlock","lastLongest","blocksPassed","Promise","resolve","reject","infoInterval","setInterval","longestchain","clearInterval","getBlockByHash","blockHash","includeTx","data","name","message","includes","attrs","BlockNotFoundError","hash","number","difficulty","size","parentHash","nonce","transactionHashes","transactions","txs","getTransactionByHash","all","parseFloat","toFixed","getBlockByNumber","blockNumber","getBlockHeight","getParsedTransactionByHash","TxNotFoundError","getTransactionFee","tx","vin","find","coinbase","inputs","input","inputTransactions","inputValues","inputTx","index","inputValue","a","b","outputValue","minus","addFees","normalizeTransactionObject","undefined","blockhash","getRawTransactionByHash","sendRawTransaction","sendBatchTransaction","outputs","to","createRawTransaction","rawTxOutputs","fundRawTransaction","rawTxFunded","signRawTransaction","hex","rawTxSigned","hexstring","JsonRpcProvider","VerusRpcProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}