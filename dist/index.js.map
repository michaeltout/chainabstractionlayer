{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/verus-js-wallet-provider/./lib/VerusJsWalletProvider.ts","webpack://@liquality/verus-js-wallet-provider/./lib/index.ts","webpack://@liquality/verus-js-wallet-provider/external commonjs \"@bitgo/utxo-lib\"","webpack://@liquality/verus-js-wallet-provider/external commonjs \"@liquality/types\"","webpack://@liquality/verus-js-wallet-provider/external commonjs \"@liquality/verus-wallet-provider\"","webpack://@liquality/verus-js-wallet-provider/external commonjs \"@liquality/wallet-provider\"","webpack://@liquality/verus-js-wallet-provider/external commonjs \"bip32\"","webpack://@liquality/verus-js-wallet-provider/external commonjs \"bip39\"","webpack://@liquality/verus-js-wallet-provider/external commonjs \"bitcoinjs-lib\"","webpack://@liquality/verus-js-wallet-provider/external commonjs \"bitcoinjs-message\"","webpack://@liquality/verus-js-wallet-provider/webpack/bootstrap","webpack://@liquality/verus-js-wallet-provider/webpack/startup"],"sourcesContent":["import { VerusWalletProvider } from '@liquality/verus-wallet-provider'\nimport { WalletProvider } from '@liquality/wallet-provider'\nimport { VerusNetwork } from '@liquality/verus-networks'\nimport { verus } from '@liquality/types'\n\nimport { ECPair, ECPairInterface, Transaction as BitcoinJsTransaction, script } from 'bitcoinjs-lib'\nimport { signAsync as signBitcoinMessage } from 'bitcoinjs-message'\nimport { mnemonicToSeed } from 'bip39'\nimport { BIP32Interface, fromSeed } from 'bip32'\n\nconst utxolib = require('@bitgo/utxo-lib') // eslint-disable-line\n\ntype WalletProviderConstructor<T = WalletProvider> = new (...args: any[]) => T\n\ninterface VerusJsWalletProviderOptions {\n  network: VerusNetwork\n  mnemonic: string\n  baseDerivationPath: string\n  addressType?: verus.AddressType\n}\n\nexport default class VerusJsWalletProvider extends VerusWalletProvider(WalletProvider as WalletProviderConstructor) {\n  _mnemonic: string\n  _seedNode: BIP32Interface\n  _baseDerivationNode: BIP32Interface\n\n  constructor(options: VerusJsWalletProviderOptions) {\n    const { network, mnemonic, baseDerivationPath, addressType = verus.AddressType.BECH32 } = options\n    super({ network, baseDerivationPath, addressType })\n\n    if (!mnemonic) throw new Error('Mnemonic should not be empty')\n\n    this._mnemonic = mnemonic\n  }\n\n  async seedNode() {\n    if (this._seedNode) return this._seedNode\n\n    const seed = await mnemonicToSeed(this._mnemonic)\n    this._seedNode = fromSeed(seed, this._network)\n\n    return this._seedNode\n  }\n\n  async baseDerivationNode() {\n    if (this._baseDerivationNode) return this._baseDerivationNode\n\n    const baseNode = await this.seedNode()\n    this._baseDerivationNode = baseNode.derivePath(this._baseDerivationPath)\n\n    return this._baseDerivationNode\n  }\n\n  async keyPair(derivationPath: string): Promise<ECPairInterface> {\n    const wif = await this._toWIF(derivationPath)\n    return ECPair.fromWIF(wif, this._network)\n  }\n\n  private async _toWIF(derivationPath: string): Promise<string> {\n    const node = await this.seedNode()\n    return node.derivePath(derivationPath).toWIF()\n  }\n\n  async exportPrivateKey() {\n    return this._toWIF(this._baseDerivationPath)\n  }\n\n  async signMessage(message: string, from: string) {\n    const address = await this.getWalletAddress(from)\n    const keyPair = await this.keyPair(address.derivationPath)\n    const signature = await signBitcoinMessage(message, keyPair.privateKey, keyPair.compressed)\n    return signature.toString('hex')\n  }\n\n  canUpdateFee() {\n    return false\n  }\n\n  async _buildTransaction(targets: verus.OutputTarget[], feePerByte?: number, fixedInputs?: verus.Input[]) {\n    const network = this._network\n\n    const unusedAddress = await this.getUnusedAddress(true)\n    const { inputs, change, fee } = await this.getInputsForAmount(targets, feePerByte, fixedInputs)\n\n    if (change) {\n      targets.push({\n        address: unusedAddress.address,\n        value: change.value\n      })\n    }\n\n    const tx = new utxolib.TransactionBuilder(network, feePerByte)\n\n    for (let i = 0; i < inputs.length; i++) {\n      tx.addInput(inputs[i].txid, inputs[i].vout)\n    }\n\n    for (const output of targets) {\n      if (output.script) {\n        tx.addOutput(output.script, output.value)\n      } else {\n        tx.addOutput(output.address, output.value)\n      }\n    }\n\n    tx.setVersion(4)\n\n    for (let i = 0; i < inputs.length; i++) {\n      const wallet = await this.getWalletAddress(inputs[i].address)\n      const keyPair = await this.keyPair(wallet.derivationPath)\n      tx.sign(i, keyPair)\n    }\n\n    return { hex: tx.build().toHex(), fee }\n  }\n\n  async _buildSweepTransaction(externalChangeAddress: string, feePerByte: number) {\n    let _feePerByte = feePerByte || null\n    if (!_feePerByte) _feePerByte = await this.getMethod('getFeePerByte')()\n\n    const { inputs, outputs, change } = await this.getInputsForAmount([], _feePerByte, [], 100, true)\n\n    if (change) {\n      throw new Error('There should not be any change for sweeping transaction')\n    }\n\n    const _outputs = [\n      {\n        address: externalChangeAddress,\n        value: outputs[0].value\n      }\n    ]\n\n    // @ts-ignore\n    return this._buildTransaction(_outputs, feePerByte, inputs)\n  }\n\n  // async signPSBT(data: string, inputs: verus.PsbtInputTarget[]) {\n  //   const psbt = Psbt.fromBase64(data, { network: this._network })\n  //   for (const input of inputs) {\n  //     const keyPair = await this.keyPair(input.derivationPath)\n  //     psbt.signInput(input.index, keyPair)\n  //   }\n  //   return psbt.toBase64()\n  // }\n\n  async signBatchP2SHTransaction(\n    inputs: [{ inputTxHex: string; index: number; vout: any; outputScript: Buffer; txInputIndex?: number }],\n    addresses: string,\n    tx: any,\n    lockTime?: number,\n    segwit?: boolean\n  ) {\n    const keyPairs = []\n    for (const address of addresses) {\n      const wallet = await this.getWalletAddress(address)\n      const keyPair = await this.keyPair(wallet.derivationPath)\n      keyPairs.push(keyPair)\n    }\n\n    const sigs = []\n    for (let i = 0; i < inputs.length; i++) {\n      const index = inputs[i].txInputIndex ? inputs[i].txInputIndex : inputs[i].index\n      let sigHash\n      if (segwit) {\n        sigHash = tx.hashForWitnessV0(\n          index,\n          inputs[i].outputScript,\n          inputs[i].vout.vSat,\n          BitcoinJsTransaction.SIGHASH_ALL\n        )\n      } else {\n        sigHash = tx.hashForSignature(index, inputs[i].outputScript, BitcoinJsTransaction.SIGHASH_ALL)\n      }\n\n      const sig = script.signature.encode(keyPairs[i].sign(sigHash), BitcoinJsTransaction.SIGHASH_ALL)\n      sigs.push(sig)\n    }\n\n    return sigs\n  }\n\n  getScriptType() {\n    if (this._addressType === verus.AddressType.LEGACY) return 'p2pkh'\n    else if (this._addressType === verus.AddressType.P2SH_SEGWIT) return 'p2sh-p2wpkh'\n    else if (this._addressType === verus.AddressType.BECH32) return 'p2wpkh'\n  }\n\n  async getConnectedNetwork() {\n    return this._network\n  }\n\n  async isWalletAvailable() {\n    return true\n  }\n}\n","import VerusJsWalletProvider from './VerusJsWalletProvider'\n\nexport { VerusJsWalletProvider }\n","module.exports = require(\"@bitgo/utxo-lib\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/verus-wallet-provider\");","module.exports = require(\"@liquality/wallet-provider\");","module.exports = require(\"bip32\");","module.exports = require(\"bip39\");","module.exports = require(\"bitcoinjs-lib\");","module.exports = require(\"bitcoinjs-message\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["utxolib","options","network","mnemonic","baseDerivationPath","addressType","verus","AddressType","BECH32","Error","_mnemonic","seedNode","this","_seedNode","mnemonicToSeed","seed","fromSeed","_network","baseDerivationNode","_baseDerivationNode","baseNode","derivePath","_baseDerivationPath","keyPair","derivationPath","_toWIF","wif","ECPair","fromWIF","toWIF","exportPrivateKey","signMessage","message","from","getWalletAddress","address","privateKey","compressed","toString","canUpdateFee","_buildTransaction","targets","feePerByte","fixedInputs","getUnusedAddress","unusedAddress","getInputsForAmount","inputs","change","fee","push","value","tx","TransactionBuilder","i","length","addInput","txid","vout","output","script","addOutput","setVersion","wallet","sign","hex","build","toHex","_buildSweepTransaction","externalChangeAddress","_feePerByte","getMethod","outputs","_outputs","signBatchP2SHTransaction","addresses","lockTime","segwit","keyPairs","sigs","index","txInputIndex","sigHash","hashForWitnessV0","outputScript","vSat","SIGHASH_ALL","hashForSignature","sig","signature","encode","getScriptType","_addressType","LEGACY","P2SH_SEGWIT","getConnectedNetwork","isWalletAvailable","VerusWalletProvider","WalletProvider","VerusJsWalletProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}