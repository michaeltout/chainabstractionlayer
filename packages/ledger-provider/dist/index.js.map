{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/ledger-provider/./lib/LedgerProvider.ts","webpack://@liquality/ledger-provider/./lib/index.ts","webpack://@liquality/ledger-provider/external commonjs \"@liquality/debug\"","webpack://@liquality/ledger-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/ledger-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/ledger-provider/external commonjs \"@liquality/wallet-provider\"","webpack://@liquality/ledger-provider/webpack/bootstrap","webpack://@liquality/ledger-provider/webpack/startup"],"sourcesContent":["import { WalletProvider } from '@liquality/wallet-provider'\nimport { WalletError } from '@liquality/errors'\nimport { caseInsensitiveEqual } from '@liquality/utils'\nimport { Network, Address } from '@liquality/types'\nimport HwTransport from '@ledgerhq/hw-transport'\nimport { Debug } from '@liquality/debug'\n\nconst debug = Debug('ledger')\n\ninterface IApp {\n  transport: any\n}\n\nexport type Newable<T> = { new (...args: any[]): T }\n\nexport default abstract class LedgerProvider<TApp extends IApp> extends WalletProvider {\n  _App: any\n  _network: Network\n  _ledgerScrambleKey: string\n  _transport: HwTransport\n  _Transport: any\n  _appInstance: TApp\n\n  constructor(options: { App: Newable<TApp>; Transport: any; network: Network; ledgerScrambleKey: string }) {\n    super({ network: options.network })\n\n    this._App = options.App\n    this._Transport = options.Transport\n    this._network = options.network\n    // The ledger scramble key is required to be set on the ledger transport\n    // if communicating with the device using `transport.send` for the first time\n    this._ledgerScrambleKey = options.ledgerScrambleKey\n  }\n\n  async createTransport() {\n    if (!this._transport) {\n      debug('creating ledger transport')\n      // @ts-ignore _Transport is class and is dynamically assigned\n      this._transport = await this._Transport.create()\n      debug('ledger transport created')\n\n      this._transport.on('disconnect', () => {\n        debug('ledger disconnected')\n        this._appInstance = null\n        this._transport = null\n      })\n    }\n  }\n\n  errorProxy(target: any, func: string) {\n    const method = target[func]\n    if (Object.getOwnPropertyNames(target).includes(func) && typeof method === 'function') {\n      return async (...args: any[]) => {\n        debug(`calling \"${func}\" on ledger object`, args)\n\n        try {\n          const result = await method.bind(target)(...args)\n          debug(`result from \"${func}\" on ledger object`, result)\n          return result\n        } catch (e) {\n          const { name, ...errorNoName } = e\n          this._transport = null\n          this._appInstance = null\n          throw new WalletError(e.toString(), errorNoName)\n        }\n      }\n    } else {\n      return method\n    }\n  }\n\n  async getApp() {\n    try {\n      await this.createTransport()\n    } catch (e) {\n      const { name, ...errorNoName } = e\n      throw new WalletError(e.toString(), errorNoName)\n    }\n    if (!this._appInstance) {\n      this._appInstance = new Proxy(new this._App(this._transport), { get: this.errorProxy.bind(this) })\n    }\n    return this._appInstance\n  }\n\n  async isWalletAvailable() {\n    const app = await this.getApp()\n    if (!app.transport.scrambleKey) {\n      // scramble key required before calls\n      app.transport.setScrambleKey(this._ledgerScrambleKey)\n    }\n    const exchangeTimeout = app.transport.exchangeTimeout\n    app.transport.setExchangeTimeout(2000)\n    try {\n      // https://ledgerhq.github.io/btchip-doc/bitcoin-technical-beta.html#_get_random\n      await this._transport.send(0xe0, 0xc0, 0x00, 0x00)\n    } catch (e) {\n      return false\n    } finally {\n      app.transport.setExchangeTimeout(exchangeTimeout)\n    }\n    return true\n  }\n\n  async getConnectedNetwork() {\n    // Ledger apps do not provide connected network. It is separated in firmware.\n    return this._network\n  }\n\n  async getWalletAddress(address: string): Promise<Address> {\n    let index = 0\n    let change = false\n\n    // A maximum number of addresses to lookup after which it is deemed\n    // that the wallet does not contain this address\n    const maxAddresses = 5000\n    const addressesPerCall = 50\n\n    while (index < maxAddresses) {\n      const addrs = await this.getAddresses(index, addressesPerCall, change)\n      const addr = addrs.find((addr) => caseInsensitiveEqual(addr.address, address))\n      if (addr) return addr\n\n      index += addressesPerCall\n      if (index === maxAddresses && change === false) {\n        index = 0\n        change = true\n      }\n    }\n\n    throw new Error('Ledger: Wallet does not contain address')\n  }\n}\n","import LedgerProvider from './LedgerProvider'\n\nexport { LedgerProvider }\n","module.exports = require(\"@liquality/debug\");","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"@liquality/wallet-provider\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["debug","Debug","options","network","_App","App","_Transport","Transport","_network","_ledgerScrambleKey","ledgerScrambleKey","createTransport","this","_transport","create","on","_appInstance","errorProxy","target","func","method","Object","getOwnPropertyNames","includes","args","bind","result","errorNoName","WalletError","toString","getApp","Proxy","get","isWalletAvailable","app","transport","scrambleKey","setScrambleKey","exchangeTimeout","setExchangeTimeout","send","getConnectedNetwork","getWalletAddress","address","index","change","maxAddresses","addressesPerCall","getAddresses","addrs","addr","find","caseInsensitiveEqual","Error","WalletProvider","LedgerProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}