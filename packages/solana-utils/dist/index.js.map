{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/solana-utils/./lib/index.ts","webpack://@liquality/solana-utils/./lib/layouts.ts","webpack://@liquality/solana-utils/external commonjs \"@liquality/crypto\"","webpack://@liquality/solana-utils/external commonjs \"@liquality/errors\"","webpack://@liquality/solana-utils/external commonjs \"@liquality/types\"","webpack://@liquality/solana-utils/external commonjs \"@liquality/utils\"","webpack://@liquality/solana-utils/external commonjs \"borsh\"","webpack://@liquality/solana-utils/external commonjs \"lodash/filter\"","webpack://@liquality/solana-utils/webpack/bootstrap","webpack://@liquality/solana-utils/webpack/startup"],"sourcesContent":["import { Address, BigNumber, Block, solana, SwapParams, Transaction, TxStatus } from '@liquality/types'\nimport {\n  addressToString,\n  validateSecretAndHash,\n  validateValue,\n  validateExpiration,\n  validateSecretHash\n} from '@liquality/utils'\nimport { InvalidAddressError } from '@liquality/errors'\nimport { base58 } from '@liquality/crypto'\nimport { ParsedConfirmedTransaction } from '@solana/web3.js'\nimport { serialize, deserialize as deserializer } from 'borsh'\nimport filter from 'lodash/filter'\n\nimport { initSchema, claimSchema, refundSchema, InitData, Template as _Template } from './layouts'\n\nconst FINALIZED_CONFIRMATIONS = 31 // Confirmations of a solana transaction with finalized status\nexport const Template = _Template\n\nexport function validateAddress(_address: Address | string) {\n  const address = addressToString(_address)\n\n  if (typeof address !== 'string') {\n    throw new InvalidAddressError(`Invalid address: ${address}`)\n  }\n\n  if (address.length !== 44) {\n    throw new InvalidAddressError(`Invalid address. Length should be 44`)\n  }\n}\n\nexport function doesTransactionMatchInitiation(swapParams: SwapParams, transactionParams: InitData) {\n  return (\n    swapParams.recipientAddress === transactionParams.buyer &&\n    swapParams.refundAddress === transactionParams.seller &&\n    swapParams.secretHash === transactionParams.secret_hash &&\n    new BigNumber(swapParams.expiration).eq(transactionParams.expiration) &&\n    swapParams.value.eq(transactionParams.value)\n  )\n}\n\nexport function deserialize(data: string) {\n  if (data) {\n    const decoded = base58.decode(data)\n\n    const instruction = decoded[0]\n\n    let schemaToUse\n\n    switch (instruction) {\n      case 0: {\n        schemaToUse = initSchema\n        break\n      }\n      case 1: {\n        schemaToUse = claimSchema\n        break\n      }\n      case 2: {\n        schemaToUse = refundSchema\n        break\n      }\n      default: {\n        break\n      }\n    }\n\n    return deserializer(schemaToUse, Template, decoded)\n  }\n}\n\nexport const createRefundBuffer = () => {\n  const refund = new Template({ instruction: 2 })\n\n  return serialize(refundSchema, refund)\n}\n\nexport const createClaimBuffer = (secret: string) => {\n  const claim = new Template({\n    instruction: 1,\n    secret: secret.toString()\n  })\n\n  return serialize(claimSchema, claim)\n}\n\nexport const createInitBuffer = ({ buyer, seller, expiration, secret_hash, value }: InitData) => {\n  const initTemplate = new Template({\n    instruction: 0,\n    buyer,\n    seller,\n    secret_hash,\n    expiration,\n    value\n  })\n\n  return serialize(initSchema, initTemplate)\n}\n\nexport function validateSecret(swapParams: SwapParams, data: { secret: string }): boolean {\n  validateSecretAndHash(data.secret, swapParams.secretHash)\n\n  return true\n}\n\nexport function normalizeTransaction(\n  tx: ParsedConfirmedTransaction,\n  signatureStatus?: any\n): Transaction<solana.InputTransaction> {\n  const {\n    transaction: {\n      message: { accountKeys, instructions },\n      signatures\n    }\n  } = tx\n\n  const [hash] = signatures\n  const [firstInstruction] = instructions as any\n\n  const transactionData: {\n    lamports: number\n    programId: string\n    confirmations?: number\n    status?: TxStatus\n    _raw?: {\n      buyer?: string\n      seller?: string\n      secret_hash?: string\n      value?: BigNumber\n      expiration?: number\n      programAccount?: string\n    }\n    secret?: string\n  } = {\n    lamports: 0,\n    programId: '',\n    _raw: {}\n  }\n\n  const txData = filter(instructions as any, 'data')\n\n  let deserialized\n\n  if (txData.length) {\n    deserialized = deserialize(txData[0].data)\n\n    transactionData._raw = { ...transactionData._raw, ...deserialized }\n\n    if (deserialized.secret) {\n      transactionData.secret = deserialized.secret\n    }\n  }\n\n  if (firstInstruction.parsed) {\n    transactionData.lamports = firstInstruction.parsed.info.lamports\n\n    const { type } = firstInstruction.parsed\n\n    switch (type) {\n      case 'finalize': {\n        transactionData.programId = firstInstruction.parsed.info.account\n        break\n      }\n      case 'createAccount': {\n        transactionData._raw.programAccount = firstInstruction.parsed.info.newAccount\n        break\n      }\n      default: {\n        break\n      }\n    }\n  }\n\n  if (!transactionData.programId) {\n    transactionData.programId = accountKeys[accountKeys.length - 1].pubkey.toString()\n  }\n\n  if (signatureStatus?.value?.confirmationStatus === 'finalized') {\n    transactionData.confirmations = FINALIZED_CONFIRMATIONS\n    transactionData.status = signatureStatus?.value?.status?.Err ? TxStatus.Failed : TxStatus.Success\n  } else {\n    transactionData.status = TxStatus.Pending\n  }\n\n  return {\n    hash,\n    value: transactionData.lamports,\n    status: transactionData.status,\n    ...(transactionData.secret && { secret: transactionData.secret }),\n    ...(transactionData.confirmations && { confirmations: transactionData.confirmations }),\n    _raw: {\n      programId: transactionData.programId,\n      ...transactionData._raw,\n      value: new BigNumber(transactionData.lamports)\n    }\n  }\n}\n\nexport function normalizeBlock(block: solana.SolanaBlock): Block {\n  return {\n    hash: block.blockhash,\n    number: block.parentSlot + 1,\n    parentHash: block.previousBlockhash,\n    size: block.blockHeight,\n    timestamp: block.blockTime,\n    transactions: []\n  }\n}\n\nexport function validateSwapParams(swapParams: SwapParams): void {\n  validateValue(swapParams.value)\n  validateSecretHash(swapParams.secretHash)\n  validateExpiration(swapParams.expiration)\n  validateAddress(swapParams.recipientAddress)\n  validateAddress(swapParams.refundAddress)\n}\n","class Assignable {\n  [key: string]: any\n\n  constructor(properties: any) {\n    Object.keys(properties).forEach((key) => {\n      this[key] = properties[key]\n    })\n  }\n}\n\nexport class Template extends Assignable {}\n\nexport const initSchema = new Map([\n  [\n    Template,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['buyer', 'string'],\n        ['seller', 'string'],\n        ['secret_hash', 'string'],\n        ['expiration', 'u64'],\n        ['value', 'u64']\n      ]\n    }\n  ]\n])\n\nexport interface InitData {\n  buyer: string\n  seller: string\n  secret_hash: string\n  expiration: number\n  value: number\n}\n\nexport const claimSchema = new Map([\n  [\n    Template,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['secret', 'string']\n      ]\n    }\n  ]\n])\n\nexport const refundSchema = new Map([\n  [\n    Template,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']]\n    }\n  ]\n])\n","module.exports = require(\"@liquality/crypto\");","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"borsh\");","module.exports = require(\"lodash/filter\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["validateAddress","_address","address","addressToString","InvalidAddressError","length","deserialize","data","decoded","base58","decode","schemaToUse","initSchema","claimSchema","refundSchema","Template","swapParams","transactionParams","recipientAddress","buyer","refundAddress","seller","secretHash","secret_hash","BigNumber","expiration","eq","value","createRefundBuffer","refund","instruction","serialize","createClaimBuffer","secret","claim","toString","createInitBuffer","initTemplate","validateSecretAndHash","tx","signatureStatus","deserialized","message","accountKeys","instructions","hash","firstInstruction","transactionData","lamports","programId","_raw","txData","parsed","info","account","programAccount","newAccount","pubkey","confirmationStatus","confirmations","status","Err","TxStatus","Failed","Success","Pending","block","blockhash","number","parentSlot","parentHash","previousBlockhash","size","blockHeight","timestamp","blockTime","transactions","validateValue","validateSecretHash","validateExpiration","properties","Object","keys","forEach","key","Map","kind","fields","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}