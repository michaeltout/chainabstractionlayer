{"version":3,"file":"index.js","mappings":"wGAAa,EAAAA,QAKX,SAAYC,GACNA,GAAQC,OAAOC,OAAOC,KAAMH,K,woBCNpC,IA8DYI,EANAC,EAxDZ,YA2ES,EAAAC,IAAAA,GAnBGD,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACrB,gBACA,4BACA,mBAGUD,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAClB,YACA,2BACA,iB,24BCjEF,gBAuCE,EAAAG,UAvCK,UAMP,aAmCE,wEAnCoB,EAAAC,YAEtB,aAqCE,uEArCO,EAAAT,WAGT,gBAsCE,EAAAU,QAAAA,EArCF,gBAsCE,EAAAC,SAAAA,EArCF,gBAsCE,EAAAC,KAAAA,EArCF,gBAsCE,EAAAC,MAAAA,EArCF,gBAsCE,EAAAC,OAAAA,EArCF,eAsCE,EAAAC,MAAAA,G,sMC/BF,IAAYN,E,oEAAAA,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAClB,kBACA,kBACA,qB,uoBC1BF,IA4DYJ,EANAC,EAtDZ,YA2ES,EAAAC,IAAAA,GArBGD,EAAA,EAAAA,cAAA,EAAAA,YAAW,KACrB,gBACA,4BACA,mBAGUD,EAAA,EAAAA,WAAA,EAAAA,SAAQ,KAClB,YACA,2BACA,iB,sEC/DFW,EAAOC,QAAUC,QAAQ,kBCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,K","sources":["webpack://@liquality/types/./lib/address.ts","webpack://@liquality/types/./lib/bitcoin/index.ts","webpack://@liquality/types/./lib/index.ts","webpack://@liquality/types/./lib/transaction.ts","webpack://@liquality/types/./lib/verus/index.ts","webpack://@liquality/types/external commonjs \"bignumber.js\"","webpack://@liquality/types/webpack/bootstrap","webpack://@liquality/types/webpack/startup"],"sourcesContent":["export class Address {\n  address: string\n  derivationPath?: string\n  publicKey?: string\n\n  constructor(fields?: { address: string; derivationPath?: string; publicKey?: string }) {\n    if (fields) Object.assign(this, fields)\n  }\n}\n","import * as rpc from './rpc'\n\nexport interface OutputTarget {\n  address?: string\n  script?: Buffer\n  value: number\n}\n\nexport interface ScriptPubKey {\n  asm: string\n  hex: string\n  reqSigs: number\n  type: string\n  addresses: string[]\n}\n\nexport interface Output {\n  value: number\n  n: number\n  scriptPubKey: ScriptPubKey\n}\n\nexport interface Input {\n  txid: string\n  vout: number\n  scriptSig: {\n    asm: string\n    hex: string\n  }\n  txinwitness: string[]\n  sequence: number\n  coinbase?: string\n}\n\nexport interface Transaction {\n  txid: string\n  hash: string\n  version: number\n  locktime: number\n  size: number\n  vsize: number\n  weight: number\n  vin: Input[]\n  vout: Output[]\n  confirmations?: number\n  hex: string\n}\n\nexport interface UTXO {\n  txid: string\n  vout: number\n  value: number\n  address: string\n  derivationPath?: string\n}\n\nexport enum AddressType {\n  LEGACY = 'legacy',\n  P2SH_SEGWIT = 'p2sh-segwit',\n  BECH32 = 'bech32'\n}\n\nexport enum SwapMode {\n  P2SH = 'p2sh',\n  P2SH_SEGWIT = 'p2shSegwit',\n  P2WSH = 'p2wsh'\n}\n\nexport type AddressTxCounts = { [index: string]: number }\n\nexport interface PsbtInputTarget {\n  index: number\n  derivationPath: string\n}\n\nexport { rpc }\n","import BigNumber from 'bignumber.js'\nimport { SwapProvider, SwapParams } from './swap'\nimport { ChainProvider, SendOptions } from './chain'\nimport { WalletProvider } from './wallet'\n\nimport { FeeProvider, FeeDetails, FeeDetail } from './fees'\nimport { Transaction, TxStatus } from './transaction'\nimport { Block } from './block'\nimport { Address } from './address'\nimport { Network } from './network'\n\nimport * as bitcoin from './bitcoin'\nimport * as ethereum from './ethereum'\nimport * as near from './near'\nimport * as terra from './terra'\nimport * as solana from './solana'\nimport * as verus from './verus'\n\ninterface IClient {\n  /**\n   * Helper method that returns method from a provider.\n   * @param {!string} method - Name of the method to look for in the provider stack\n   * @param {object} [requestor] - If provided, it returns method from providers only\n   *  above the requestor in the stack.\n   * @return {function} Returns method from provider instance associated with the requested method\n   */\n  getMethod(method: string, requestor?: any): () => any\n\n  chain: ChainProvider\n  swap: SwapProvider\n  wallet: WalletProvider\n}\n\nexport {\n  IClient,\n  SwapProvider,\n  ChainProvider,\n  WalletProvider,\n  FeeProvider,\n  BigNumber,\n  Transaction,\n  TxStatus,\n  Block,\n  FeeDetails,\n  FeeDetail,\n  Address,\n  Network,\n  SendOptions,\n  SwapParams,\n  bitcoin,\n  ethereum,\n  near,\n  terra,\n  solana,\n  verus\n}\n","export interface Transaction<T = any> {\n  // Transaction hash\n  hash: string\n  // The value of the transaction\n  value: number\n  // transaction status\n  status?: TxStatus\n  // Hash of the block containing the transaction\n  blockHash?: string\n  // The block number containing the trnasaction\n  blockNumber?: number\n  // The number of confirmations of the transaction\n  confirmations?: number\n  // The price per unit of fee\n  feePrice?: number\n  // The total fee paid for the transaction\n  fee?: number\n  // Secret of a HTLC\n  secret?: string\n  // The raw transaction object\n  _raw: T\n}\n\nexport enum TxStatus {\n  Pending = 'PENDING',\n  Failed = 'FAILED',\n  Success = 'SUCCESS'\n}\n","import * as rpc from './rpc'\n\nexport interface OutputTarget {\n  address?: string\n  script?: Buffer\n  value: number\n}\n\nexport interface ScriptPubKey {\n  asm: string\n  hex: string\n  reqSigs: number\n  type: string\n  addresses: string[]\n}\n\nexport interface Output {\n  value: number\n  n: number\n  scriptPubKey: ScriptPubKey\n}\n\nexport interface Input {\n  txid: string\n  vout: number\n  scriptSig: {\n    asm: string\n    hex: string\n  }\n  txinwitness: string[]\n  sequence: number\n  coinbase?: string\n}\n\nexport interface Transaction {\n  txid: string\n  hash: string\n  version: number\n  locktime: number\n  vin: Input[]\n  vout: Output[]\n  confirmations?: number\n  hex: string\n  blockhash?: string\n}\n\nexport interface UTXO {\n  txid: string\n  vout: number\n  value: number\n  address: string\n  derivationPath?: string\n}\n\nexport enum AddressType {\n  LEGACY = 'legacy',\n  P2SH_SEGWIT = 'p2sh-segwit',\n  BECH32 = 'bech32'\n}\n\nexport enum SwapMode {\n  P2SH = 'p2sh',\n  P2SH_SEGWIT = 'p2shSegwit',\n  P2WSH = 'p2wsh'\n}\n\nexport type AddressTxCounts = { [index: string]: number }\n\nexport type AddressDeltas = { [index: string]: Array<rpc.AddressDelta> }\n\nexport interface PsbtInputTarget {\n  index: number\n  derivationPath: string\n}\n\nexport { rpc }\n","module.exports = require(\"bignumber.js\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["Address","fields","Object","assign","this","SwapMode","AddressType","rpc","BigNumber","TxStatus","bitcoin","ethereum","near","terra","solana","verus","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}