{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/ethereum-wallet-api-provider/./lib/EthereumWalletApiProvider.ts","webpack://@liquality/ethereum-wallet-api-provider/./lib/index.ts","webpack://@liquality/ethereum-wallet-api-provider/external commonjs \"@liquality/debug\"","webpack://@liquality/ethereum-wallet-api-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/ethereum-wallet-api-provider/external commonjs \"@liquality/ethereum-networks\"","webpack://@liquality/ethereum-wallet-api-provider/external commonjs \"@liquality/ethereum-utils\"","webpack://@liquality/ethereum-wallet-api-provider/external commonjs \"@liquality/types\"","webpack://@liquality/ethereum-wallet-api-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/ethereum-wallet-api-provider/external commonjs \"@liquality/wallet-provider\"","webpack://@liquality/ethereum-wallet-api-provider/external commonjs \"lodash\"","webpack://@liquality/ethereum-wallet-api-provider/webpack/bootstrap","webpack://@liquality/ethereum-wallet-api-provider/webpack/startup"],"sourcesContent":["import { WalletProvider } from '@liquality/wallet-provider'\nimport { EthereumNetworks, EthereumNetwork } from '@liquality/ethereum-networks'\nimport { WalletError } from '@liquality/errors'\nimport { ensure0x, buildTransaction, normalizeTransactionObject, remove0x } from '@liquality/ethereum-utils'\nimport { addressToString } from '@liquality/utils'\nimport { Address, SendOptions, BigNumber, ethereum } from '@liquality/types'\nimport { Debug } from '@liquality/debug'\n\nimport { findKey } from 'lodash'\n\nconst debug = Debug('ethereum')\n\ninterface RequestArguments {\n  method: string\n  params?: any[] | any\n}\n\ninterface EthereumProvider {\n  request(req: RequestArguments): Promise<any>\n  enable(): Promise<ethereum.Address[]>\n}\n\n// EIP1193\nexport default class EthereumWalletApiProvider extends WalletProvider {\n  _ethereumProvider: EthereumProvider\n  _network: EthereumNetwork\n\n  constructor(ethereumProvider: EthereumProvider, network: EthereumNetwork) {\n    super({ network })\n    this._ethereumProvider = ethereumProvider\n    this._network = network\n  }\n\n  async request(method: string, ...params: any) {\n    await this._ethereumProvider.enable()\n\n    try {\n      const result = await this._ethereumProvider.request({ method, params })\n      debug('got success', result)\n      return result\n    } catch (e) {\n      debug('got error', e.message)\n      throw new WalletError(e.toString(), e)\n    }\n  }\n\n  async isWalletAvailable() {\n    const addresses: string[] = await this.request('eth_accounts')\n    return addresses.length > 0\n  }\n\n  async getAddresses() {\n    const addresses: string[] = await this.request('eth_accounts')\n\n    if (addresses.length === 0) {\n      throw new WalletError('Wallet: No addresses available')\n    }\n\n    return addresses.map((address: string) => {\n      return new Address({ address: remove0x(address) })\n    })\n  }\n\n  async getUsedAddresses() {\n    return this.getAddresses()\n  }\n\n  async getUnusedAddress() {\n    const addresses = await this.getAddresses()\n    return addresses[0]\n  }\n\n  async signMessage(message: string) {\n    const hex = Buffer.from(message).toString('hex')\n\n    const addresses = await this.getAddresses()\n    const address = addresses[0]\n\n    return this.request('personal_sign', ensure0x(hex), ensure0x(addressToString(address)))\n  }\n\n  async sendTransaction(options: SendOptions) {\n    const networkId = await this.getWalletNetworkId()\n\n    if (this._network) {\n      if (networkId !== this._network.networkId) {\n        throw new Error('Invalid Network')\n      }\n    }\n\n    const addresses = await this.getAddresses()\n    const from = addressToString(addresses[0])\n\n    const txOptions: ethereum.UnsignedTransaction = {\n      from,\n      to: options.to ? addressToString(options.to) : (options.to as string),\n      value: options.value,\n      data: options.data\n    }\n    if (options.fee) txOptions.gasPrice = new BigNumber(options.fee)\n\n    const txData = await buildTransaction(txOptions)\n\n    const txHash: string = await this.request('eth_sendTransaction', txData)\n\n    const txWithHash: ethereum.PartialTransaction = {\n      ...txData,\n      input: txData.data,\n      hash: txHash\n    }\n\n    return normalizeTransactionObject(txWithHash)\n  }\n\n  canUpdateFee() {\n    return false\n  }\n\n  async getWalletNetworkId() {\n    const networkId: ethereum.Hex = await this.request('net_version')\n\n    return parseInt(networkId)\n  }\n\n  async getConnectedNetwork() {\n    const networkId = await this.getWalletNetworkId()\n    const network = findKey(EthereumNetworks, (network) => network.networkId === networkId)\n\n    if (networkId && !network) {\n      return {\n        name: 'unknown',\n        networkId\n      }\n    }\n\n    return (EthereumNetworks as { [key: string]: EthereumNetwork })[network]\n  }\n}\n","import EthereumWalletApiProvider from './EthereumWalletApiProvider'\n\nexport { EthereumWalletApiProvider }\n","module.exports = require(\"@liquality/debug\");","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/ethereum-networks\");","module.exports = require(\"@liquality/ethereum-utils\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"@liquality/wallet-provider\");","module.exports = require(\"lodash\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["debug","Debug","ethereumProvider","network","_ethereumProvider","_network","request","method","this","enable","params","result","message","WalletError","toString","isWalletAvailable","length","getAddresses","addresses","map","address","Address","remove0x","getUsedAddresses","getUnusedAddress","signMessage","hex","Buffer","from","ensure0x","addressToString","sendTransaction","options","getWalletNetworkId","networkId","Error","txOptions","to","value","data","fee","gasPrice","BigNumber","buildTransaction","txData","txHash","txWithHash","input","hash","normalizeTransactionObject","canUpdateFee","parseInt","getConnectedNetwork","findKey","EthereumNetworks","name","WalletProvider","EthereumWalletApiProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}