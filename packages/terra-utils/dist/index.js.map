{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/terra-utils/./lib/index.ts","webpack://@liquality/terra-utils/external commonjs \"@liquality/errors\"","webpack://@liquality/terra-utils/external commonjs \"@liquality/types\"","webpack://@liquality/terra-utils/external commonjs \"@liquality/utils\"","webpack://@liquality/terra-utils/external commonjs \"luxon\"","webpack://@liquality/terra-utils/webpack/bootstrap","webpack://@liquality/terra-utils/webpack/startup"],"sourcesContent":["import { Block, SwapParams, Transaction, terra, TxStatus } from '@liquality/types'\nimport { addressToString, validateExpiration, validateSecretHash, validateValue } from '@liquality/utils'\nimport { InvalidAddressError } from '@liquality/errors'\nimport { DateTime } from 'luxon'\n\nexport const normalizeBlock = (data: any): Block => ({\n  hash: data.block_id.hash,\n  timestamp: convertDateToTimestamp(data.block.header.time),\n  size: Number(data.block.header.height),\n  number: Number(data.block.header.height),\n  parentHash: data.block.last_commit.block_id.hash\n})\n\nexport const normalizeTransaction = (\n  data: any,\n  asset: string,\n  currentBlock?: number\n): Transaction<terra.InputTransaction> => {\n  const denom = Object.keys(data.tx.fee?.amount?._coins || {})?.[0]\n\n  const fee = data.tx.fee?.amount?._coins?.[denom]?.amount?.toNumber()\n  const msg = data.tx.body?.messages?.[0] || data.tx.value?.msg?.[0]?.value\n\n  let value = 0\n\n  if (Array.isArray(msg?.init_coins)) {\n    value = msg.init_coins.find((e: any) => e.denom === asset)?.amount\n  } else if (typeof msg?.init_coins === 'object') {\n    value = msg.init_coins.get(asset)?.amount\n  }\n\n  const codeId = msg.code_id\n  let txParams = msg?.init_msg || msg?.execute_msg || {}\n\n  if (Object.keys(txParams).length) {\n    const initMsg = msg?.init_msg\n    const executeMsg = msg?.execute_msg\n\n    if (initMsg) {\n      txParams = initMsg\n    }\n\n    if (executeMsg && typeof txParams !== 'string') {\n      txParams.method = executeMsg\n\n      if (txParams.method.claim) {\n        txParams.secret = txParams.method.claim.secret\n      }\n    }\n  }\n\n  const logs = data.logs?.[0]\n\n  const contractAddress =\n    logs?.eventsByType?.execute_contract?.contract_address[0] ||\n    logs?.events?.find((e: any) => e.type === 'wasm')?.attributes.find((e: any) => e.key === 'contract_address')\n      .value ||\n    ''\n\n  let status\n  if (currentBlock - data.height < 10) {\n    status = TxStatus.Pending\n  } else {\n    status = data.raw_log?.includes('failed to execute message') ? TxStatus.Failed : TxStatus.Success\n  }\n\n  return {\n    value: Number(value),\n    hash: data.txhash,\n    confirmations: Math.min(currentBlock - data.height, 10),\n    ...(txParams?.secret && { secret: txParams.secret }),\n    fee,\n    status,\n    _raw: {\n      ...txParams,\n      contractAddress,\n      codeId\n    }\n  }\n}\n\nexport const doesTransactionMatchInitiation = (swapParams: SwapParams, transactionParams: any): boolean => {\n  return (\n    swapParams.recipientAddress === transactionParams.buyer &&\n    swapParams.refundAddress === transactionParams.seller &&\n    swapParams.secretHash === transactionParams.secret_hash &&\n    swapParams.expiration === transactionParams.expiration &&\n    swapParams.value.eq(transactionParams.value)\n  )\n}\n\nexport const validateSwapParams = (swapParams: SwapParams) => {\n  validateValue(swapParams.value)\n  validateSecretHash(swapParams.secretHash)\n  validateExpiration(swapParams.expiration)\n  validateAddress(addressToString(swapParams.recipientAddress))\n  validateAddress(addressToString(swapParams.refundAddress))\n}\n\nconst convertDateToTimestamp = (fullDate: string): number => {\n  return DateTime.fromISO(fullDate).toSeconds()\n}\n\nconst validateAddress = (address: string): void => {\n  if (typeof address !== 'string' || address.length !== 44) {\n    throw new InvalidAddressError(`Invalid address: ${address}`)\n  }\n}\n","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"luxon\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["normalizeBlock","data","hash","block_id","timestamp","convertDateToTimestamp","block","header","time","size","Number","height","number","parentHash","last_commit","normalizeTransaction","asset","currentBlock","denom","Object","keys","tx","fee","amount","_coins","toNumber","msg","body","messages","value","Array","isArray","init_coins","find","e","get","codeId","code_id","txParams","init_msg","execute_msg","length","initMsg","executeMsg","method","claim","secret","status","logs","contractAddress","eventsByType","execute_contract","contract_address","events","type","attributes","key","TxStatus","Pending","raw_log","includes","Failed","Success","txhash","confirmations","Math","min","_raw","doesTransactionMatchInitiation","swapParams","transactionParams","recipientAddress","buyer","refundAddress","seller","secretHash","secret_hash","expiration","eq","validateSwapParams","validateValue","validateSecretHash","validateExpiration","validateAddress","addressToString","fullDate","DateTime","fromISO","toSeconds","address","InvalidAddressError","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}