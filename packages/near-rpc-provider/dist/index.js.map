{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/near-rpc-provider/./lib/NearRpcProvider.ts","webpack://@liquality/near-rpc-provider/./lib/index.ts","webpack://@liquality/near-rpc-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/near-rpc-provider/external commonjs \"@liquality/near-utils\"","webpack://@liquality/near-rpc-provider/external commonjs \"@liquality/node-provider\"","webpack://@liquality/near-rpc-provider/external commonjs \"@liquality/types\"","webpack://@liquality/near-rpc-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/near-rpc-provider/external commonjs \"lodash\"","webpack://@liquality/near-rpc-provider/webpack/bootstrap","webpack://@liquality/near-rpc-provider/webpack/startup"],"sourcesContent":["import { NodeProvider } from '@liquality/node-provider'\nimport { near, BigNumber, ChainProvider, FeeProvider, Address, Block, Transaction, FeeDetails } from '@liquality/types'\nimport { NearNetwork } from '@liquality/near-networks'\nimport { addressToString } from '@liquality/utils'\nimport { normalizeTransactionObject, providers, Account, fromNearTimestamp } from '@liquality/near-utils'\nimport { NodeError } from '@liquality/errors'\n\nimport { get, isArray } from 'lodash'\n\ninterface RpcProvider extends providers.JsonRpcProvider {\n  [key: string]: any\n}\n\nexport default class NearRpcProvider extends NodeProvider implements Partial<ChainProvider>, FeeProvider {\n  _network: NearNetwork\n  _jsonRpc: RpcProvider\n\n  constructor(network: NearNetwork) {\n    super({\n      baseURL: network.helperUrl,\n      responseType: 'text',\n      transformResponse: undefined\n    })\n    this._jsonRpc = new providers.JsonRpcProvider(network.nodeUrl)\n    this._network = network\n  }\n\n  async sendRawTransaction(hash: string): Promise<string> {\n    const result = await this._sendRawTransaction(hash)\n    return get(result, 'transaction.hash')\n  }\n\n  async getBlockByHash(blockHash: string, includeTx: boolean) {\n    return this._getBlockById(blockHash, includeTx)\n  }\n\n  async getBlockByNumber(blockNumber: number, includeTx?: boolean) {\n    return this._getBlockById(blockNumber, includeTx)\n  }\n\n  async getBlockHeight(txHash?: string) {\n    const result = await this._rpc('block', txHash ? { blockId: txHash } : { finality: 'final' })\n    return get(result, 'header.height')\n  }\n\n  async getTransactionByHash(txHash: string) {\n    const currentHeight = await this.getBlockHeight()\n    const args = txHash.split('_')\n    const tx = await this._rpcQuery('tx', args)\n    const blockHash = tx.transaction_outcome.block_hash\n    const blockNumber = await this.getBlockHeight(blockHash)\n    return normalizeTransactionObject({ ...tx, blockNumber, blockHash }, currentHeight)\n  }\n\n  async getTransactionReceipt(txHash: string): Promise<near.InputTransaction> {\n    const args = txHash.split('_')\n    const tx = await this._rpcQuery('EXPERIMENTAL_tx_status', args)\n    const blockNumber = await this.getBlockHeight(tx.transaction_outcome.block_hash)\n    return { ...tx, blockNumber }\n  }\n\n  async getGasPrice() {\n    const result = await this._rpcQuery('gas_price', [null])\n    const gasPrice = get(result, 'gas_price')\n    return parseInt(gasPrice)\n  }\n\n  async getBalance(_addresses: (Address | string)[]): Promise<BigNumber> {\n    const addresses = _addresses.map(addressToString)\n\n    const promiseBalances = await Promise.all(\n      addresses.map(async (address) => {\n        try {\n          const balance = await this.getAccount(address).getAccountBalance()\n          return new BigNumber(balance.available)\n        } catch (err) {\n          if (err.message && err.message.includes('does not exist while viewing')) {\n            return new BigNumber(0)\n          }\n          throw err\n        }\n      })\n    )\n\n    return promiseBalances\n      .map((balance) => new BigNumber(balance))\n      .reduce((acc, balance) => acc.plus(balance), new BigNumber(0))\n  }\n\n  async generateBlock(numberOfBlocks: number) {\n    await new Promise((resolve) => setTimeout(resolve, numberOfBlocks * 20000))\n  }\n\n  async getImplicitAccount(publicKey: string, index: number): Promise<string> {\n    const accounts = await this.nodeGet(`/publicKey/${publicKey.toString()}/accounts`)\n    return accounts[index]\n  }\n\n  getAccount(accountId: string, signer?: any): Account {\n    return new Account(\n      {\n        networkId: this._network.networkId,\n        provider: this._jsonRpc,\n        signer\n      },\n      accountId\n    )\n  }\n\n  async getFees(): Promise<FeeDetails> {\n    const fee = await this.getGasPrice()\n    return {\n      slow: {\n        fee\n      },\n      average: {\n        fee\n      },\n      fast: {\n        fee\n      }\n    }\n  }\n\n  async _sendRawTransaction(hash: string) {\n    return this._rpcQuery('broadcast_tx_commit', [hash])\n  }\n\n  normalizeBlock(block: near.NearInputBlockHeader) {\n    const normalizedBlock: Block<Transaction<near.InputTransaction>> = {\n      number: block.height,\n      hash: block.hash,\n      timestamp: fromNearTimestamp(block.timestamp),\n      size: block.chunks_included,\n      transactions: [],\n      parentHash: block.prev_hash\n    }\n\n    return normalizedBlock\n  }\n\n  async _getBlockById(blockId: number | string, includeTx: boolean) {\n    const block = await this._rpc('block', { blockId })\n    const currentHeight = await this.getBlockHeight()\n    const header = block.header\n    const normalizedBlock = this.normalizeBlock(header)\n\n    if (includeTx && !block.transactions && isArray(block.chunks)) {\n      const chunks = await Promise.all(block.chunks.map((c: any) => this._rpc('chunk', c.chunk_hash)))\n\n      const transactions = chunks.reduce<Transaction<near.InputTransaction>[]>(\n        (p: Transaction<near.InputTransaction>[], c: near.NearChunk) => {\n          const tx = c.transactions.map((t: near.Tx) => {\n            return normalizeTransactionObject(\n              {\n                transaction: t,\n                blockNumber: header.height,\n                blockHash: header.hash,\n                status: t.status\n              },\n              currentHeight\n            )\n          })\n          p.push(...tx)\n          return p\n        },\n        []\n      )\n\n      normalizedBlock.transactions = transactions\n    }\n\n    return normalizedBlock\n  }\n\n  async _rpc(method: any, args: any) {\n    try {\n      const data = await this._jsonRpc[method](args)\n      return data\n    } catch (error) {\n      throw new NodeError(`${error.type} ${error.message}`, { data: { method, args } })\n    }\n  }\n\n  async _rpcQuery(method: string, args: any[]): Promise<any> {\n    try {\n      const data = await this._jsonRpc.sendJsonRpc(method, args)\n      return data\n    } catch (error) {\n      throw new NodeError(`${error.type} ${error.message}`, { data: { method, args } })\n    }\n  }\n}\n","import NearRpcProvider from './NearRpcProvider'\n\nexport { NearRpcProvider }\n","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/near-utils\");","module.exports = require(\"@liquality/node-provider\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"lodash\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["network","baseURL","helperUrl","responseType","transformResponse","undefined","_jsonRpc","providers","JsonRpcProvider","nodeUrl","_network","sendRawTransaction","hash","this","_sendRawTransaction","result","get","getBlockByHash","blockHash","includeTx","_getBlockById","getBlockByNumber","blockNumber","getBlockHeight","txHash","_rpc","blockId","finality","getTransactionByHash","currentHeight","args","split","_rpcQuery","tx","transaction_outcome","block_hash","normalizeTransactionObject","getTransactionReceipt","getGasPrice","gasPrice","parseInt","getBalance","_addresses","addresses","map","addressToString","Promise","all","address","getAccount","getAccountBalance","balance","BigNumber","available","message","includes","reduce","acc","plus","generateBlock","numberOfBlocks","resolve","setTimeout","getImplicitAccount","publicKey","index","nodeGet","toString","accountId","signer","Account","networkId","provider","getFees","slow","fee","average","fast","normalizeBlock","block","number","height","timestamp","fromNearTimestamp","size","chunks_included","transactions","parentHash","prev_hash","header","normalizedBlock","isArray","chunks","c","chunk_hash","p","t","transaction","status","push","method","NodeError","type","data","sendJsonRpc","NodeProvider","NearRpcProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}