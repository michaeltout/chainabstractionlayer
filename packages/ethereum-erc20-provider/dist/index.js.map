{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/ethereum-erc20-provider/./lib/EthereumErc20Provider.ts","webpack://@liquality/ethereum-erc20-provider/./lib/index.ts","webpack://@liquality/ethereum-erc20-provider/external commonjs \"@liquality/crypto\"","webpack://@liquality/ethereum-erc20-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/ethereum-erc20-provider/external commonjs \"@liquality/ethereum-utils\"","webpack://@liquality/ethereum-erc20-provider/external commonjs \"@liquality/provider\"","webpack://@liquality/ethereum-erc20-provider/external commonjs \"@liquality/types\"","webpack://@liquality/ethereum-erc20-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/ethereum-erc20-provider/webpack/bootstrap","webpack://@liquality/ethereum-erc20-provider/webpack/startup"],"sourcesContent":["import { Provider } from '@liquality/provider'\nimport { padHexStart } from '@liquality/crypto'\nimport { addressToString } from '@liquality/utils'\nimport { ensure0x, remove0x, numberToHex } from '@liquality/ethereum-utils'\nimport { ChainProvider, SendOptions, BigNumber, Address } from '@liquality/types'\nimport { InsufficientBalanceError } from '@liquality/errors'\n\nconst SOL_TRANSFER_FUNCTION = '0xa9059cbb' // transfer(address,uint256)\nconst SOL_BALACE_OF_FUNCTION = '0x70a08231' // balanceOf(address)\n\nexport default class EthereumErc20Provider extends Provider implements Partial<ChainProvider> {\n  _contractAddress: string\n\n  constructor(contractAddress: string) {\n    super()\n    this._contractAddress = remove0x(contractAddress)\n  }\n\n  generateErc20Transfer(to: string, value: BigNumber) {\n    const encodedAddress = padHexStart(remove0x(to), 32)\n    const encodedValue = padHexStart(remove0x(numberToHex(value)), 32)\n\n    return [remove0x(SOL_TRANSFER_FUNCTION), encodedAddress, encodedValue].join('').toLowerCase()\n  }\n\n  async sendTransaction(options: SendOptions) {\n    if (!options.data) {\n      // erc20 transfer\n      await this.getMethod('assertContractExists')(this._contractAddress)\n\n      // check for erc20 balance\n      const addresses: Address[] = await this.getMethod('getAddresses')()\n      const balance = await this.getBalance(addresses.map((address) => address.address))\n      if (balance.isLessThan(options.value)) {\n        throw new InsufficientBalanceError(\n          `${addresses[0]} doesn't have enough balance (has: ${balance}, want: ${options.value})`\n        )\n      }\n\n      options.data = this.generateErc20Transfer(addressToString(options.to), options.value)\n      options.value = new BigNumber(0)\n      options.to = ensure0x(this._contractAddress)\n    }\n\n    return this.getMethod('sendTransaction')(options)\n  }\n\n  async sendSweepTransaction(address: Address | string, gasPrice: number) {\n    const addresses: Address[] = await this.getMethod('getAddresses')()\n\n    const balance = await this.getBalance(addresses.map((address) => address.address))\n\n    const sendOptions: SendOptions = {\n      to: address,\n      value: balance,\n      data: null,\n      fee: gasPrice\n    }\n\n    return this.sendTransaction(sendOptions)\n  }\n\n  getContractAddress() {\n    return this._contractAddress\n  }\n\n  async getBalance(_addresses: (Address | string)[]) {\n    await this.getMethod('assertContractExists')(this._contractAddress)\n\n    const addresses = _addresses.map(addressToString).map(ensure0x)\n\n    const promiseBalances = await Promise.all(\n      addresses.map((address) =>\n        this.getMethod('jsonrpc')(\n          'eth_call',\n          {\n            data: [SOL_BALACE_OF_FUNCTION, padHexStart(remove0x(address), 32)].join('').toLowerCase(),\n            to: ensure0x(this._contractAddress).toLowerCase()\n          },\n          'latest'\n        )\n      )\n    )\n\n    return promiseBalances\n      .map((balance) => new BigNumber(balance))\n      .filter((balance) => !balance.isNaN())\n      .reduce((acc, balance) => acc.plus(balance), new BigNumber(0))\n  }\n}\n","import EthereumErc20Provider from './EthereumErc20Provider'\n\nexport { EthereumErc20Provider }\n","module.exports = require(\"@liquality/crypto\");","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/ethereum-utils\");","module.exports = require(\"@liquality/provider\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["SOL_BALACE_OF_FUNCTION","contractAddress","_contractAddress","remove0x","generateErc20Transfer","to","value","encodedAddress","padHexStart","encodedValue","numberToHex","join","toLowerCase","sendTransaction","options","data","this","getMethod","addresses","getBalance","map","address","balance","isLessThan","InsufficientBalanceError","addressToString","BigNumber","ensure0x","sendSweepTransaction","gasPrice","sendOptions","fee","getContractAddress","_addresses","Promise","all","filter","isNaN","reduce","acc","plus","Provider","EthereumErc20Provider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}