{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/ethereum-ledger-provider/./lib/EthereumLedgerProvider.ts","webpack://@liquality/ethereum-ledger-provider/./lib/index.ts","webpack://@liquality/ethereum-ledger-provider/external commonjs \"@ledgerhq/hw-app-eth\"","webpack://@liquality/ethereum-ledger-provider/external commonjs \"@liquality/ethereum-utils\"","webpack://@liquality/ethereum-ledger-provider/external commonjs \"@liquality/ledger-provider\"","webpack://@liquality/ethereum-ledger-provider/external commonjs \"@liquality/types\"","webpack://@liquality/ethereum-ledger-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/ethereum-ledger-provider/external commonjs \"ethereumjs-tx\"","webpack://@liquality/ethereum-ledger-provider/external commonjs \"ethereumjs-util\"","webpack://@liquality/ethereum-ledger-provider/webpack/bootstrap","webpack://@liquality/ethereum-ledger-provider/webpack/startup"],"sourcesContent":["import { LedgerProvider } from '@liquality/ledger-provider'\nimport { Address, ethereum, SendOptions, Transaction, BigNumber } from '@liquality/types'\nimport { EthereumNetwork } from '@liquality/ethereum-networks'\nimport { addressToString } from '@liquality/utils'\nimport {\n  ensure0x,\n  remove0x,\n  numberToHex,\n  buildTransaction,\n  normalizeTransactionObject,\n  hexToNumber\n} from '@liquality/ethereum-utils'\nimport { toRpcSig } from 'ethereumjs-util'\n\nimport HwAppEthereum from '@ledgerhq/hw-app-eth'\nimport EthereumJsTx from 'ethereumjs-tx'\n\ninterface EthereumLedgerProviderOptions {\n  network: EthereumNetwork\n  derivationPath: string\n  Transport: any\n}\n\nexport default class EthereumLedgerProvider extends LedgerProvider<HwAppEthereum> {\n  _derivationPath: string\n\n  constructor(options: EthereumLedgerProviderOptions) {\n    super({ ...options, App: HwAppEthereum, ledgerScrambleKey: 'w0w' }) // srs!\n    this._derivationPath = options.derivationPath\n  }\n\n  async signMessage(message: string, from: string) {\n    const app = await this.getApp()\n    const address = await this.getWalletAddress(from)\n    const hex = Buffer.from(message).toString('hex')\n    const { v, r, s } = await app.signPersonalMessage(address.derivationPath, hex)\n\n    return remove0x(toRpcSig(v, Buffer.from(r, 'hex'), Buffer.from(s, 'hex')))\n  }\n\n  async getAddresses() {\n    const app = await this.getApp()\n    const address = await app.getAddress(this._derivationPath)\n    return [\n      new Address({\n        address: address.address,\n        derivationPath: this._derivationPath,\n        publicKey: address.publicKey\n      })\n    ]\n  }\n\n  async getUnusedAddress() {\n    const addresses = await this.getAddresses()\n    return addresses[0]\n  }\n\n  async isWalletAvailable() {\n    try {\n      const addresses = await this.getAddresses()\n      return addresses.length > 0\n    } catch (e) {\n      return false\n    }\n  }\n\n  async getUsedAddresses() {\n    return this.getAddresses()\n  }\n\n  async signTransaction(txData: ethereum.TransactionRequest, path: string) {\n    const chainId = numberToHex((this._network as EthereumNetwork).chainId)\n    const app = await this.getApp()\n    const tx = new EthereumJsTx({\n      ...txData,\n      chainId: hexToNumber(chainId), // HEY Could be incorrect\n      v: chainId\n    })\n    const serializedTx = tx.serialize().toString('hex')\n    const txSig = await app.signTransaction(path, serializedTx)\n    const signedTxData = {\n      ...txData,\n      v: ensure0x(txSig.v),\n      r: ensure0x(txSig.r),\n      s: ensure0x(txSig.s)\n    }\n\n    const signedTx = new EthereumJsTx(signedTxData)\n    const signedSerializedTx = signedTx.serialize().toString('hex')\n    return signedSerializedTx\n  }\n\n  async sendTransaction(options: SendOptions) {\n    const addresses = await this.getAddresses()\n    const address = addresses[0]\n    const from = address.address\n\n    const [nonce, gasPrice] = await Promise.all([\n      this.getMethod('getTransactionCount')(remove0x(from), 'pending'),\n      options.fee ? Promise.resolve(new BigNumber(options.fee)) : this.getMethod('getGasPrice')()\n    ])\n\n    const txOptions: ethereum.UnsignedTransaction = {\n      from,\n      to: options.to ? addressToString(options.to) : (options.to as string),\n      value: options.value,\n      data: options.data,\n      gasPrice,\n      nonce\n    }\n\n    const txData = buildTransaction(txOptions)\n    const gas = await this.getMethod('estimateGas')(txData)\n    txData.gas = numberToHex(gas)\n\n    const signedSerializedTx = await this.signTransaction(txData, address.derivationPath)\n    const txHash = await this.getMethod('sendRawTransaction')(signedSerializedTx)\n\n    const txWithHash: ethereum.PartialTransaction = {\n      ...txData,\n      input: txData.data,\n      hash: txHash\n    }\n    return normalizeTransactionObject(txWithHash)\n  }\n\n  async updateTransactionFee(tx: Transaction<ethereum.PartialTransaction> | string, newGasPrice: number) {\n    const transaction: Transaction<ethereum.Transaction> =\n      typeof tx === 'string' ? await this.getMethod('getTransactionByHash')(tx) : tx\n\n    const txOptions: ethereum.UnsignedTransaction = {\n      from: transaction._raw.from,\n      to: transaction._raw.to,\n      value: new BigNumber(transaction._raw.value),\n      gasPrice: new BigNumber(newGasPrice),\n      data: transaction._raw.input,\n      nonce: hexToNumber(transaction._raw.nonce)\n    }\n\n    const txData = await buildTransaction(txOptions)\n    const gas = await this.getMethod('estimateGas')(txData)\n    txData.gas = numberToHex(gas)\n\n    const address = await this.getWalletAddress(txData.from)\n    const signedSerializedTx = await this.signTransaction(txData, address.derivationPath)\n    const newTxHash = await this.getMethod('sendRawTransaction')(signedSerializedTx)\n\n    const txWithHash: ethereum.PartialTransaction = {\n      ...txData,\n      input: txData.data,\n      hash: newTxHash\n    }\n\n    return normalizeTransactionObject(txWithHash)\n  }\n}\n","import EthereumLedgerProvider from './EthereumLedgerProvider'\n\nexport { EthereumLedgerProvider }\n","module.exports = require(\"@ledgerhq/hw-app-eth\");","module.exports = require(\"@liquality/ethereum-utils\");","module.exports = require(\"@liquality/ledger-provider\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"ethereumjs-tx\");","module.exports = require(\"ethereumjs-util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["options","App","ledgerScrambleKey","_derivationPath","derivationPath","signMessage","message","from","this","getApp","app","getWalletAddress","address","hex","Buffer","toString","signPersonalMessage","v","r","s","remove0x","toRpcSig","getAddresses","getAddress","Address","publicKey","getUnusedAddress","isWalletAvailable","length","getUsedAddresses","signTransaction","txData","path","chainId","numberToHex","_network","tx","hexToNumber","serializedTx","serialize","txSig","signedTxData","ensure0x","sendTransaction","addresses","Promise","all","getMethod","fee","resolve","BigNumber","nonce","gasPrice","txOptions","to","addressToString","value","data","buildTransaction","gas","signedSerializedTx","txHash","txWithHash","input","hash","normalizeTransactionObject","updateTransactionFee","newGasPrice","transaction","_raw","newTxHash","LedgerProvider","EthereumLedgerProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}