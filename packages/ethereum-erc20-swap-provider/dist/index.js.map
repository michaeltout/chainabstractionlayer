{"version":3,"file":"index.js","mappings":"y7DAAA,aACA,SACA,SAQA,SACA,SACA,SASMA,EAAqB,aACrBC,EAAsB,aAE5B,2B,+CAsSA,OAtSuD,OAIrD,YAAAC,iBAAA,SAAiBC,GACfC,KAAKC,mBAAmBF,GAExB,IAAMG,EAAmB,EAAAC,SAAS,EAAAC,gBAAgBL,EAAWG,mBACvDG,EAAgB,EAAAF,SAAS,EAAAC,gBAAgBL,EAAWM,gBACpDC,EAAoB,EAAAC,YAAYR,EAAWS,WAAWC,SAAS,IAAK,IAGpEC,EAAW,CACf,+CACAR,EACA,yBACAG,EACA,uBAPmB,EAAAF,SAASH,KAAKW,UAAU,qBAAfX,IAS5B,2DACAD,EAAWa,WACX,iSACAN,EACA,44EAECO,KAAK,IACLC,cAEH,GAAoC,OAAhCC,OAAOC,WAAWN,GACpB,MAAM,IAAIO,MAAM,mDAGlB,OAAOP,GAGT,YAAAT,mBAAA,SAAmBF,GACjB,EAAAmB,cAAcnB,EAAWoB,OACzB,EAAAC,gBAAgBrB,EAAWG,kBAC3B,EAAAkB,gBAAgBrB,EAAWM,eAC3B,EAAAgB,mBAAmBtB,EAAWa,YAC9B,EAAAU,mBAAmBvB,EAAWS,aAG1B,YAAAe,aAAN,SAAmBxB,EAAwByB,G,oGAGZ,OAF7BxB,KAAKC,mBAAmBF,GAEK,GAAMC,KAAKW,UAAU,eAAfX,I,OACnB,OADVyB,EAAuB,SACb,GAAMzB,KAAK0B,OAAOC,MAAMC,WAAWH,I,OAEnD,IAFMI,EAAU,UAEJC,WAAW/B,EAAWoB,OAChC,MAAM,IAAI,EAAAY,yBACLN,EAAU,GAAE,sCAAsCI,EAAO,WAAW9B,EAAWoB,MAAK,KAK3F,OADMT,EAAWV,KAAKF,iBAAiBC,GAChC,CAAP,EAAOC,KAAK0B,OAAOC,MAAMK,gBAAgB,CACvCC,GAAI,KACJd,MAAO,IAAI,EAAAe,UAAU,GACrBC,KAAMzB,EACN0B,IAAKZ,aAIH,YAAAa,SAAN,SAAetC,EAAwBuC,EAA0Bd,G,kGAGjC,OAF9BxB,KAAKC,mBAAmBF,GAEM,GAAMC,KAAKW,UAAU,uBAAfX,CAAuCsC,I,OAC3E,KADMC,EAAwB,UACF,MAAM,IAAI,EAAAC,gBAAgB,0BAA0BF,GAEd,SAAMtC,KAAKW,UAAU,wBAAfX,CACtEsC,I,OAEF,KAHMG,EAA4D,UAIhE,MAAM,IAAI,EAAAC,eAAe,yCAAyCJ,GAIpE,IADEG,EAA6BE,iBAA2D,QAAxCF,EAA6BG,OAE7E,MAAM,IAAI,EAAAC,cACR,6CAA6CJ,EAA6BK,iBAM9E,IAFqC9C,KAAK+C,+BAA+BhD,EAAYwC,GAGnF,MAAM,IAAI,EAAAS,+BACR,2DAA2DV,GAI/D,SAAMtC,KAAKW,UAAU,uBAAfX,CAAuCyC,EAA6BE,kB,OAE3C,OAF/B,SAE+B,GAAM3C,KAAKiD,sBACxCR,EAA6BE,gBAC7B,IAAI,EAAAT,UAAU,K,OAEhB,IAJ+B,SAK7B,MAAM,IAAI,EAAAc,+BAA+B,0BAA0BP,EAA6BE,iBAGlG,MAAO,CAAP,EAAO3C,KAAK0B,OAAOC,MAAMK,gBAAgB,CACvCC,GAAIQ,EAA6BE,gBACjCxB,MAAOpB,EAAWoB,MAClBiB,IAAKZ,aAIH,YAAA0B,UAAN,SAAgBnD,EAAwBuC,EAA0Ba,EAAgB3B,G,gGAIhF,OAHAxB,KAAKC,mBAAmBF,GACxB,EAAAqD,eAAeD,GACf,EAAAE,sBAAsBF,EAAQpD,EAAWa,YACzC,GAAMZ,KAAKsD,8BAA8BvD,EAAYuC,I,OAEhB,OAFrC,SAEqC,GAAMtC,KAAKW,UAAU,wBAAfX,CAAwCsC,I,OACnF,KADMG,EAA+B,UAEnC,MAAM,IAAI,EAAAC,eAAe,yCAAyCJ,GAEpE,SAAMtC,KAAKW,UAAU,uBAAfX,CAAuCyC,EAA6BE,kB,OAE1E,OAFA,SAEO,CAAP,EAAO3C,KAAK0B,OAAOC,MAAMK,gBAAgB,CACvCC,GAAIQ,EAA6BE,gBACjCxB,MAAO,IAAI,EAAAe,UAAU,GACrBC,KAAMvC,EAAqBuD,EAC3Bf,IAAKZ,aAIH,YAAA+B,WAAN,SAAiBxD,EAAwBuC,EAA0Bd,G,gGAEjE,OADAxB,KAAKC,mBAAmBF,GACxB,GAAMC,KAAKsD,8BAA8BvD,EAAYuC,I,OAEhB,OAFrC,SAEqC,GAAMtC,KAAKW,UAAU,wBAAfX,CAAwCsC,I,OACnF,KADMG,EAA+B,UAEnC,MAAM,IAAI,EAAAC,eAAe,yCAAyCJ,GAEpE,SAAMtC,KAAKW,UAAU,uBAAfX,CAAuCyC,EAA6BE,kB,OAE1E,OAFA,SAEO,CAAP,EAAO3C,KAAK0B,OAAOC,MAAMK,gBAAgB,CACvCC,GAAIQ,EAA6BE,gBACjCxB,MAAO,IAAI,EAAAe,UAAU,GACrBC,KAAMtC,EACNuC,IAAKZ,aAIT,YAAAuB,+BAAA,SAA+BhD,EAAwByD,GACrD,IAAMrB,EAAOnC,KAAKF,iBAAiBC,GACnC,OAA+B,OAAxByD,EAAYC,KAAKxB,IAAeuB,EAAYC,KAAKC,QAAU,EAAAC,SAASxB,IAG7E,YAAAyB,0BAAA,SACE7D,EACAyD,EACAf,GAEA,OACE,EAAAoB,qBAAqBL,EAAYC,KAAKxB,GAAIQ,EAA6BE,kBACvEa,EAAYC,KAAKC,MAAMI,WAAWlE,IAItC,YAAAmE,4BAAA,SACEP,EACAQ,EACAC,GAEA,OACE,EAAAJ,qBAAqBL,EAAYC,KAAKxB,GAAI+B,IAC1CR,EAAYC,KAAKC,QAAU,EAAAC,SAASM,IAIlC,YAAAhB,sBAAN,SAA4BN,EAAyBxB,G,0FACnC,SAAMnB,KAAK0B,OAAOC,MAAMC,WAAW,CAACe,K,OACpD,MAAO,CAAP,EADgB,SACDuB,UAAU/C,YAGrB,YAAAgD,cAAN,SAAoBC,G,gGACO,SAAMpE,KAAKW,UAAU,uBAAfX,CAAuCoE,I,OACtE,OADMC,EAAmB,SAClB,CAAP,EAAO,EAAAlE,SAASkE,EAAiBZ,KAAKC,OAAOY,UAAU,YAGnD,YAAAhB,8BAAN,SAAoCvD,EAAwBuC,G,sGAG5B,OAF9BtC,KAAKC,mBAAmBF,GAEM,GAAMC,KAAKW,UAAU,uBAAfX,CAAuCsC,I,OAC3E,KADMC,EAAwB,UACF,MAAM,IAAI,EAAAC,gBAAgB,0BAA0BF,GAEd,SAAMtC,KAAKW,UAAU,wBAAfX,CACtEsC,I,OAEF,KAHMG,EAA4D,UAIhE,MAAM,IAAI,EAAAC,eAAe,yCAAyCJ,GAEpE,SAAMtC,KAAKW,UAAU,uBAAfX,CAAuCyC,EAA6BE,kB,OAIhD,OAJ1B,SAEM4B,EAA+BvE,KAAK+C,+BAA+BhD,EAAYwC,GAE3D,GAAMvC,KAAKiD,sBACnCR,EAA6BE,gBAC7B5C,EAAWoB,Q,OAGb,OALMqD,EAAoB,SAKnB,CAAP,EACED,GACA9B,EAA6BE,iBACW,QAAxCF,EAA6BG,QAC7B4B,WAIE,YAAAC,4BAAN,SAAkC1E,EAAwB2E,G,uGAGA,OAFxD1E,KAAKC,mBAAmBF,GAEgC,GAAMC,KAAKW,UAAU,mBAAfX,CAAmC0E,GAAa,I,OAC9G,KADMC,EAAkD,UAC5C,MAAM,IAAI,EAAAC,mBAAmB,UAAUF,EAAW,qBAE9D,MAAO,CAAP,EAAOC,EAAME,aAAaC,MAAK,SAACtB,GAAgB,SAAKT,+BAA+BhD,EAAYyD,eAG5F,YAAAuB,wBAAN,SAA8BhF,EAAwBuC,EAA0BoC,G,+GAGtB,OAFxD1E,KAAKC,mBAAmBF,GAEgC,GAAMC,KAAKW,UAAU,mBAAfX,CAAmC0E,GAAa,I,OAC9G,KADMC,EAAkD,UAC5C,MAAM,IAAI,EAAAC,mBAAmB,UAAUF,EAAW,qBAEzB,SAAM1E,KAAKW,UAAU,wBAAfX,CAAwCsC,I,OACnF,KADMG,EAA+B,UAEnC,MAAM,IAAI,EAAAC,eAAe,yCAAyCJ,GAElC,SAAMtC,KAAKW,UAAU,qBAAfX,I,OACnB,OADfgE,EAA4B,SACb,GAAMhE,KAAKW,UAAU,wBAAfX,CACzByC,EAA6BE,gBAC7B5C,EAAWoB,Q,OAOb,GATM8C,EAAe,WAKfe,EAAKL,EAAME,aAAaC,MAAK,SAACtB,GAClC,SAAKO,4BAA4BP,EAAaQ,EAA2BC,OAGlE,MAAM,IAAI,EAAAzB,gBAAgB,yCAAyCF,GAE5E,MAAO,CAAP,EAAO0C,WAGH,YAAAC,yBAAN,SAA+BlF,EAAwBuC,EAA0BoC,G,+GAGvB,OAFxD1E,KAAKC,mBAAmBF,GAEgC,GAAMC,KAAKW,UAAU,mBAAfX,CAAmC0E,GAAa,I,OAC9G,KADMC,EAAkD,UAC5C,MAAM,IAAI,EAAAC,mBAAmB,UAAUF,EAAW,qBAEzB,SAAM1E,KAAKW,UAAU,wBAAfX,CAAwCsC,I,OACnF,KADMG,EAA+B,UAEnC,MAAM,IAAI,EAAAC,eAAe,yCAAyCJ,GAKpE,OAHMkB,EAAcmB,EAAME,aAAaC,MAAK,SAACtB,GAC3C,SAAKI,0BAA0B7D,EAAYyD,EAAaf,OAIF,GAAMzC,KAAKW,UAAU,wBAAfX,CAC5DwD,EAAY0B,OAHI,I,OAKlB,KAHMC,EAAkD,UAG/B,MAAM,IAAI,EAAAzC,eAAe,+CAA+Cc,EAAY0B,M,MAE3E,QAA9BC,EAAmBvC,OAAnB,MACa,GAAM5C,KAAKmE,cAAcX,EAAY0B,O,OAGpD,OAHM/B,EAAS,SACf,EAAAE,sBAAsBF,EAAQpD,EAAWa,YACzC4C,EAAYL,OAASA,EACd,CAAP,EAAOK,G,yBAIL,YAAA4B,0BAAN,SAAgCrF,EAAwBuC,EAA0BoC,G,kGAGxB,OAFxD1E,KAAKC,mBAAmBF,GAEgC,GAAMC,KAAKW,UAAU,mBAAfX,CAAmC0E,GAAa,I,OAC9G,KADMC,EAAkD,UAC5C,MAAM,IAAI,EAAAC,mBAAmB,UAAUF,EAAW,qBAEI,SAAM1E,KAAKW,UAAU,wBAAfX,CACtEsC,I,OAEF,KAHMG,EAA4D,UAIhE,MAAM,IAAI,EAAAC,eAAe,yCAAyCJ,GAEpE,MAAO,CAAP,EAAOqC,EAAME,aAAaC,MACxB,SAACtB,GACC,SAAAK,qBAAqBL,EAAYC,KAAKxB,GAAIQ,EAA6BE,kBACvEa,EAAYC,KAAKC,QAAU7D,GAC3B8E,EAAMU,WAAatF,EAAWS,uBAlS7B,EAAAZ,mBAAqBA,EACrB,EAAAC,oBAAsBA,EAoS/B,EAtSA,CAAuD,EAAAyF,U,UAAlCC,G,4LCxBrB,gBAES,EAAAA,0BAFF,W,QCAPC,EAAOC,QAAUC,QAAQ,sB,QCAzBF,EAAOC,QAAUC,QAAQ,sB,QCAzBF,EAAOC,QAAUC,QAAQ,8B,QCAzBF,EAAOC,QAAUC,QAAQ,wB,QCAzBF,EAAOC,QAAUC,QAAQ,qB,QCAzBF,EAAOC,QAAUC,QAAQ,sBCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,K","sources":["webpack://@liquality/ethereum-erc20-swap-provider/./lib/EthereumErc20SwapProvider.ts","webpack://@liquality/ethereum-erc20-swap-provider/./lib/index.ts","webpack://@liquality/ethereum-erc20-swap-provider/external commonjs \"@liquality/crypto\"","webpack://@liquality/ethereum-erc20-swap-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/ethereum-erc20-swap-provider/external commonjs \"@liquality/ethereum-utils\"","webpack://@liquality/ethereum-erc20-swap-provider/external commonjs \"@liquality/provider\"","webpack://@liquality/ethereum-erc20-swap-provider/external commonjs \"@liquality/types\"","webpack://@liquality/ethereum-erc20-swap-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/ethereum-erc20-swap-provider/webpack/bootstrap","webpack://@liquality/ethereum-erc20-swap-provider/webpack/startup"],"sourcesContent":["import { Provider } from '@liquality/provider'\nimport { padHexStart } from '@liquality/crypto'\nimport {\n  addressToString,\n  caseInsensitiveEqual,\n  validateValue,\n  validateSecret,\n  validateSecretHash,\n  validateSecretAndHash\n} from '@liquality/utils'\nimport { remove0x, ensure0x, validateAddress, validateExpiration } from '@liquality/ethereum-utils'\nimport { SwapProvider, SwapParams, Block, Transaction, BigNumber, Address, ethereum } from '@liquality/types'\nimport {\n  PendingTxError,\n  TxNotFoundError,\n  TxFailedError,\n  BlockNotFoundError,\n  InvalidDestinationAddressError,\n  InsufficientBalanceError\n} from '@liquality/errors'\n\nconst SOL_CLAIM_FUNCTION = '0xbd66528a' // claim(bytes32)\nconst SOL_REFUND_FUNCTION = '0x590e1ae3' // refund()\n\nexport default class EthereumErc20SwapProvider extends Provider implements Partial<SwapProvider> {\n  static SOL_CLAIM_FUNCTION = SOL_CLAIM_FUNCTION\n  static SOL_REFUND_FUNCTION = SOL_REFUND_FUNCTION\n\n  createSwapScript(swapParams: SwapParams) {\n    this.validateSwapParams(swapParams)\n\n    const recipientAddress = remove0x(addressToString(swapParams.recipientAddress))\n    const refundAddress = remove0x(addressToString(swapParams.refundAddress))\n    const expirationEncoded = padHexStart(swapParams.expiration.toString(16), 32)\n    const tokenAddress = remove0x(this.getMethod('getContractAddress')())\n\n    const bytecode = [\n      '6080604052600080546001600160a01b031990811673',\n      recipientAddress,\n      '1790915560018054821673',\n      refundAddress,\n      '17905560028054821673',\n      tokenAddress,\n      '1790819055600380549092166001600160a01b03919091161790557f',\n      swapParams.secretHash,\n      '6004553480156100b157600080fd5b50610555806100c16000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063590e1ae31461003b578063bd66528a14610045575b600080fd5b610043610062565b005b6100436004803603602081101561005b57600080fd5b5035610235565b6004361461006f57600080fd5b7f',\n      expirationEncoded,\n      '421161009b57600080fd5b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156100e657600080fd5b505afa1580156100fa573d6000803e3d6000fd5b505050506040513d602081101561011057600080fd5b505190508061011e57600080fd5b600154600354604080516370a0823160e01b815230600482015290516101fe9363a9059cbb60e01b936001600160a01b03918216939116916370a0823191602480820192602092909190829003018186803b15801561017c57600080fd5b505afa158015610190573d6000803e3d6000fd5b505050506040513d60208110156101a657600080fd5b5051604080516001600160a01b0390931660248401526044808401929092528051808403909201825260649092019091526020810180516001600160e01b03166001600160e01b03199093169290921790915261040d565b6040517f5d26862916391bf49478b2f5103b0720a842b45ef145a268f2cd1fb2aed5517890600090a16001546001600160a01b0316ff5b6024361461024257600080fd5b600454600282604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083106102965780518252601f199092019160209182019101610277565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156102d5573d6000803e3d6000fd5b5050506040513d60208110156102ea57600080fd5b5051146102f657600080fd5b600354604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561034157600080fd5b505afa158015610355573d6000803e3d6000fd5b505050506040513d602081101561036b57600080fd5b505190508061037957600080fd5b600054604080516001600160a01b039092166024830152604480830184905281518084039091018152606490920190526020810180516001600160e01b031663a9059cbb60e01b1790526103cc9061040d565b6040805183815290517f8c1d64e3bd87387709175b9ef4e7a1d7a8364559fc0e2ad9d77953909a0d1eb39181900360200190a16000546001600160a01b0316ff5b600061041882610446565b8051909150156104425780806020019051602081101561043757600080fd5b505161044257600080fd5b5050565b600254604051825160609260009283926001600160a01b0390921691869190819060208401908083835b6020831061048f5780518252601f199092019160209182019101610470565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146104f1576040519150601f19603f3d011682016040523d82523d6000602084013e6104f6565b606091505b5091509150811561050a57915061051a9050565b8051156100365780518082602001fd5b91905056fea2646970667358221220439a725cbd518d89b852af5b7e1c335cc4ba64e029f96f6c702b2e60fb985ba564736f6c63430007060033'\n    ]\n      .join('')\n      .toLowerCase()\n\n    if (Buffer.byteLength(bytecode) !== 3116) {\n      throw new Error('Invalid swap script. Bytecode length incorrect.')\n    }\n\n    return bytecode\n  }\n\n  validateSwapParams(swapParams: SwapParams) {\n    validateValue(swapParams.value)\n    validateAddress(swapParams.recipientAddress)\n    validateAddress(swapParams.refundAddress)\n    validateSecretHash(swapParams.secretHash)\n    validateExpiration(swapParams.expiration)\n  }\n\n  async initiateSwap(swapParams: SwapParams, gasPrice: number) {\n    this.validateSwapParams(swapParams)\n\n    const addresses: Address[] = await this.getMethod('getAddresses')()\n    const balance = await this.client.chain.getBalance(addresses)\n\n    if (balance.isLessThan(swapParams.value)) {\n      throw new InsufficientBalanceError(\n        `${addresses[0]} doesn't have enough balance (has: ${balance}, want: ${swapParams.value})`\n      )\n    }\n\n    const bytecode = this.createSwapScript(swapParams)\n    return this.client.chain.sendTransaction({\n      to: null,\n      value: new BigNumber(0),\n      data: bytecode,\n      fee: gasPrice\n    })\n  }\n\n  async fundSwap(swapParams: SwapParams, initiationTxHash: string, gasPrice: number) {\n    this.validateSwapParams(swapParams)\n\n    const initiationTransaction = await this.getMethod('getTransactionByHash')(initiationTxHash)\n    if (!initiationTransaction) throw new TxNotFoundError(`Transaction not found: ${initiationTxHash}`)\n\n    const initiationTransactionReceipt: ethereum.TransactionReceipt = await this.getMethod('getTransactionReceipt')(\n      initiationTxHash\n    )\n    if (!initiationTransactionReceipt)\n      throw new PendingTxError(`Transaction receipt is not available: ${initiationTxHash}`)\n\n    const initiationSuccessful =\n      initiationTransactionReceipt.contractAddress && initiationTransactionReceipt.status === '0x1'\n    if (!initiationSuccessful) {\n      throw new TxFailedError(\n        `ERC20 swap initiation transaction failed: ${initiationTransactionReceipt.transactionHash}`\n      )\n    }\n\n    const transactionMatchesSwapParams = this.doesTransactionMatchInitiation(swapParams, initiationTransaction)\n\n    if (!transactionMatchesSwapParams) {\n      throw new InvalidDestinationAddressError(\n        `Contract creation does not match initiation parameters: ${initiationTxHash}`\n      )\n    }\n\n    await this.getMethod('assertContractExists')(initiationTransactionReceipt.contractAddress)\n\n    const contractHasZeroBalance = await this.doesBalanceMatchValue(\n      initiationTransactionReceipt.contractAddress,\n      new BigNumber(0)\n    )\n    if (!contractHasZeroBalance) {\n      throw new InvalidDestinationAddressError(`Contract is not empty: ${initiationTransactionReceipt.contractAddress}`)\n    }\n\n    return this.client.chain.sendTransaction({\n      to: initiationTransactionReceipt.contractAddress,\n      value: swapParams.value,\n      fee: gasPrice\n    })\n  }\n\n  async claimSwap(swapParams: SwapParams, initiationTxHash: string, secret: string, gasPrice: number) {\n    this.validateSwapParams(swapParams)\n    validateSecret(secret)\n    validateSecretAndHash(secret, swapParams.secretHash)\n    await this.verifyInitiateSwapTransaction(swapParams, initiationTxHash)\n\n    const initiationTransactionReceipt = await this.getMethod('getTransactionReceipt')(initiationTxHash)\n    if (!initiationTransactionReceipt)\n      throw new PendingTxError(`Transaction receipt is not available: ${initiationTxHash}`)\n\n    await this.getMethod('assertContractExists')(initiationTransactionReceipt.contractAddress)\n\n    return this.client.chain.sendTransaction({\n      to: initiationTransactionReceipt.contractAddress,\n      value: new BigNumber(0),\n      data: SOL_CLAIM_FUNCTION + secret,\n      fee: gasPrice\n    })\n  }\n\n  async refundSwap(swapParams: SwapParams, initiationTxHash: string, gasPrice: number) {\n    this.validateSwapParams(swapParams)\n    await this.verifyInitiateSwapTransaction(swapParams, initiationTxHash)\n\n    const initiationTransactionReceipt = await this.getMethod('getTransactionReceipt')(initiationTxHash)\n    if (!initiationTransactionReceipt)\n      throw new PendingTxError(`Transaction receipt is not available: ${initiationTxHash}`)\n\n    await this.getMethod('assertContractExists')(initiationTransactionReceipt.contractAddress)\n\n    return this.client.chain.sendTransaction({\n      to: initiationTransactionReceipt.contractAddress,\n      value: new BigNumber(0),\n      data: SOL_REFUND_FUNCTION,\n      fee: gasPrice\n    })\n  }\n\n  doesTransactionMatchInitiation(swapParams: SwapParams, transaction: Transaction<ethereum.Transaction>) {\n    const data = this.createSwapScript(swapParams)\n    return transaction._raw.to === null && transaction._raw.input === ensure0x(data)\n  }\n\n  doesTransactionMatchClaim(\n    swapParams: SwapParams,\n    transaction: Transaction<ethereum.Transaction>,\n    initiationTransactionReceipt: ethereum.TransactionReceipt\n  ) {\n    return (\n      caseInsensitiveEqual(transaction._raw.to, initiationTransactionReceipt.contractAddress) &&\n      transaction._raw.input.startsWith(SOL_CLAIM_FUNCTION)\n    )\n  }\n\n  doesTransactionMatchFunding(\n    transaction: Transaction<ethereum.Transaction>,\n    erc20TokenContractAddress: string,\n    contractData: string\n  ) {\n    return (\n      caseInsensitiveEqual(transaction._raw.to, erc20TokenContractAddress) &&\n      transaction._raw.input === ensure0x(contractData)\n    )\n  }\n\n  async doesBalanceMatchValue(contractAddress: string, value: BigNumber) {\n    const balance = await this.client.chain.getBalance([contractAddress])\n    return balance.isEqualTo(value)\n  }\n\n  async getSwapSecret(claimTxHash: string) {\n    const claimTransaction = await this.getMethod('getTransactionByHash')(claimTxHash)\n    return remove0x(claimTransaction._raw.input).substring(8)\n  }\n\n  async verifyInitiateSwapTransaction(swapParams: SwapParams, initiationTxHash: string) {\n    this.validateSwapParams(swapParams)\n\n    const initiationTransaction = await this.getMethod('getTransactionByHash')(initiationTxHash)\n    if (!initiationTransaction) throw new TxNotFoundError(`Transaction not found: ${initiationTxHash}`)\n\n    const initiationTransactionReceipt: ethereum.TransactionReceipt = await this.getMethod('getTransactionReceipt')(\n      initiationTxHash\n    )\n    if (!initiationTransactionReceipt)\n      throw new PendingTxError(`Transaction receipt is not available: ${initiationTxHash}`)\n\n    await this.getMethod('assertContractExists')(initiationTransactionReceipt.contractAddress)\n\n    const transactionMatchesSwapParams = this.doesTransactionMatchInitiation(swapParams, initiationTransaction)\n\n    const balanceMatchValue = await this.doesBalanceMatchValue(\n      initiationTransactionReceipt.contractAddress,\n      swapParams.value\n    )\n\n    return (\n      transactionMatchesSwapParams &&\n      initiationTransactionReceipt.contractAddress &&\n      initiationTransactionReceipt.status === '0x1' &&\n      balanceMatchValue\n    )\n  }\n\n  async findInitiateSwapTransaction(swapParams: SwapParams, blockNumber: number) {\n    this.validateSwapParams(swapParams)\n\n    const block: Block<Transaction<ethereum.Transaction>> = await this.getMethod('getBlockByNumber')(blockNumber, true)\n    if (!block) throw new BlockNotFoundError(`Block #${blockNumber} is not available`)\n\n    return block.transactions.find((transaction) => this.doesTransactionMatchInitiation(swapParams, transaction))\n  }\n\n  async findFundSwapTransaction(swapParams: SwapParams, initiationTxHash: string, blockNumber: number) {\n    this.validateSwapParams(swapParams)\n\n    const block: Block<Transaction<ethereum.Transaction>> = await this.getMethod('getBlockByNumber')(blockNumber, true)\n    if (!block) throw new BlockNotFoundError(`Block #${blockNumber} is not available`)\n\n    const initiationTransactionReceipt = await this.getMethod('getTransactionReceipt')(initiationTxHash)\n    if (!initiationTransactionReceipt)\n      throw new PendingTxError(`Transaction receipt is not available: ${initiationTxHash}`)\n\n    const erc20TokenContractAddress = await this.getMethod('getContractAddress')()\n    const contractData = await this.getMethod('generateErc20Transfer')(\n      initiationTransactionReceipt.contractAddress,\n      swapParams.value\n    )\n\n    const tx = block.transactions.find((transaction) =>\n      this.doesTransactionMatchFunding(transaction, erc20TokenContractAddress, contractData)\n    )\n\n    if (!tx) throw new TxNotFoundError(`Funding transaction is not available: ${initiationTxHash}`)\n\n    return tx\n  }\n\n  async findClaimSwapTransaction(swapParams: SwapParams, initiationTxHash: string, blockNumber: number) {\n    this.validateSwapParams(swapParams)\n\n    const block: Block<Transaction<ethereum.Transaction>> = await this.getMethod('getBlockByNumber')(blockNumber, true)\n    if (!block) throw new BlockNotFoundError(`Block #${blockNumber} is not available`)\n\n    const initiationTransactionReceipt = await this.getMethod('getTransactionReceipt')(initiationTxHash)\n    if (!initiationTransactionReceipt)\n      throw new PendingTxError(`Transaction receipt is not available: ${initiationTxHash}`)\n\n    const transaction = block.transactions.find((transaction) =>\n      this.doesTransactionMatchClaim(swapParams, transaction, initiationTransactionReceipt)\n    )\n    if (!transaction) return\n\n    const transactionReceipt: ethereum.TransactionReceipt = await this.getMethod('getTransactionReceipt')(\n      transaction.hash\n    )\n    if (!transactionReceipt) throw new PendingTxError(`Claim transaction receipt is not available: ${transaction.hash}`)\n\n    if (transactionReceipt.status === '0x1') {\n      const secret = await this.getSwapSecret(transaction.hash)\n      validateSecretAndHash(secret, swapParams.secretHash)\n      transaction.secret = secret\n      return transaction\n    }\n  }\n\n  async findRefundSwapTransaction(swapParams: SwapParams, initiationTxHash: string, blockNumber: number) {\n    this.validateSwapParams(swapParams)\n\n    const block: Block<Transaction<ethereum.Transaction>> = await this.getMethod('getBlockByNumber')(blockNumber, true)\n    if (!block) throw new BlockNotFoundError(`Block #${blockNumber} is not available`)\n\n    const initiationTransactionReceipt: ethereum.TransactionReceipt = await this.getMethod('getTransactionReceipt')(\n      initiationTxHash\n    )\n    if (!initiationTransactionReceipt)\n      throw new PendingTxError(`Transaction receipt is not available: ${initiationTxHash}`)\n\n    return block.transactions.find(\n      (transaction) =>\n        caseInsensitiveEqual(transaction._raw.to, initiationTransactionReceipt.contractAddress) &&\n        transaction._raw.input === SOL_REFUND_FUNCTION &&\n        block.timestamp >= swapParams.expiration\n    )\n  }\n}\n","import EthereumErc20SwapProvider from './EthereumErc20SwapProvider'\n\nexport { EthereumErc20SwapProvider }\n","module.exports = require(\"@liquality/crypto\");","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/ethereum-utils\");","module.exports = require(\"@liquality/provider\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["SOL_CLAIM_FUNCTION","SOL_REFUND_FUNCTION","createSwapScript","swapParams","this","validateSwapParams","recipientAddress","remove0x","addressToString","refundAddress","expirationEncoded","padHexStart","expiration","toString","bytecode","getMethod","secretHash","join","toLowerCase","Buffer","byteLength","Error","validateValue","value","validateAddress","validateSecretHash","validateExpiration","initiateSwap","gasPrice","addresses","client","chain","getBalance","balance","isLessThan","InsufficientBalanceError","sendTransaction","to","BigNumber","data","fee","fundSwap","initiationTxHash","initiationTransaction","TxNotFoundError","initiationTransactionReceipt","PendingTxError","contractAddress","status","TxFailedError","transactionHash","doesTransactionMatchInitiation","InvalidDestinationAddressError","doesBalanceMatchValue","claimSwap","secret","validateSecret","validateSecretAndHash","verifyInitiateSwapTransaction","refundSwap","transaction","_raw","input","ensure0x","doesTransactionMatchClaim","caseInsensitiveEqual","startsWith","doesTransactionMatchFunding","erc20TokenContractAddress","contractData","isEqualTo","getSwapSecret","claimTxHash","claimTransaction","substring","transactionMatchesSwapParams","balanceMatchValue","findInitiateSwapTransaction","blockNumber","block","BlockNotFoundError","transactions","find","findFundSwapTransaction","tx","findClaimSwapTransaction","hash","transactionReceipt","findRefundSwapTransaction","timestamp","Provider","EthereumErc20SwapProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}