{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/bitcoin-js-wallet-provider/./lib/BitcoinJsWalletProvider.ts","webpack://@liquality/bitcoin-js-wallet-provider/./lib/index.ts","webpack://@liquality/bitcoin-js-wallet-provider/external commonjs \"@liquality/bitcoin-wallet-provider\"","webpack://@liquality/bitcoin-js-wallet-provider/external commonjs \"@liquality/types\"","webpack://@liquality/bitcoin-js-wallet-provider/external commonjs \"@liquality/wallet-provider\"","webpack://@liquality/bitcoin-js-wallet-provider/external commonjs \"bip32\"","webpack://@liquality/bitcoin-js-wallet-provider/external commonjs \"bip39\"","webpack://@liquality/bitcoin-js-wallet-provider/external commonjs \"bitcoinjs-lib\"","webpack://@liquality/bitcoin-js-wallet-provider/external commonjs \"bitcoinjs-message\"","webpack://@liquality/bitcoin-js-wallet-provider/webpack/bootstrap","webpack://@liquality/bitcoin-js-wallet-provider/webpack/startup"],"sourcesContent":["import { BitcoinWalletProvider } from '@liquality/bitcoin-wallet-provider'\nimport { WalletProvider } from '@liquality/wallet-provider'\nimport { BitcoinNetwork } from '@liquality/bitcoin-networks'\nimport { bitcoin } from '@liquality/types'\n\nimport { Psbt, ECPair, ECPairInterface, Transaction as BitcoinJsTransaction, script } from 'bitcoinjs-lib'\nimport { signAsync as signBitcoinMessage } from 'bitcoinjs-message'\nimport { mnemonicToSeed } from 'bip39'\nimport { BIP32Interface, fromSeed } from 'bip32'\n\ntype WalletProviderConstructor<T = WalletProvider> = new (...args: any[]) => T\n\ninterface BitcoinJsWalletProviderOptions {\n  network: BitcoinNetwork\n  mnemonic: string\n  baseDerivationPath: string\n  addressType?: bitcoin.AddressType\n}\n\nexport default class BitcoinJsWalletProvider extends BitcoinWalletProvider(\n  WalletProvider as WalletProviderConstructor\n) {\n  _mnemonic: string\n  _seedNode: BIP32Interface\n  _baseDerivationNode: BIP32Interface\n\n  constructor(options: BitcoinJsWalletProviderOptions) {\n    const { network, mnemonic, baseDerivationPath, addressType = bitcoin.AddressType.BECH32 } = options\n    super({ network, baseDerivationPath, addressType })\n\n    if (!mnemonic) throw new Error('Mnemonic should not be empty')\n\n    this._mnemonic = mnemonic\n  }\n\n  async seedNode() {\n    if (this._seedNode) return this._seedNode\n\n    const seed = await mnemonicToSeed(this._mnemonic)\n    this._seedNode = fromSeed(seed, this._network)\n\n    return this._seedNode\n  }\n\n  async baseDerivationNode() {\n    if (this._baseDerivationNode) return this._baseDerivationNode\n\n    const baseNode = await this.seedNode()\n    this._baseDerivationNode = baseNode.derivePath(this._baseDerivationPath)\n\n    return this._baseDerivationNode\n  }\n\n  async keyPair(derivationPath: string): Promise<ECPairInterface> {\n    const wif = await this._toWIF(derivationPath)\n    return ECPair.fromWIF(wif, this._network)\n  }\n\n  private async _toWIF(derivationPath: string): Promise<string> {\n    const node = await this.seedNode()\n    return node.derivePath(derivationPath).toWIF()\n  }\n\n  async exportPrivateKey() {\n    return this._toWIF(this._baseDerivationPath)\n  }\n\n  async signMessage(message: string, from: string) {\n    const address = await this.getWalletAddress(from)\n    const keyPair = await this.keyPair(address.derivationPath)\n    const signature = await signBitcoinMessage(message, keyPair.privateKey, keyPair.compressed)\n    return signature.toString('hex')\n  }\n\n  async _buildTransaction(targets: bitcoin.OutputTarget[], feePerByte?: number, fixedInputs?: bitcoin.Input[]) {\n    const network = this._network\n\n    const unusedAddress = await this.getUnusedAddress(true)\n    const { inputs, change, fee } = await this.getInputsForAmount(targets, feePerByte, fixedInputs)\n\n    if (change) {\n      targets.push({\n        address: unusedAddress.address,\n        value: change.value\n      })\n    }\n\n    const psbt = new Psbt({ network })\n\n    const needsWitness = [bitcoin.AddressType.BECH32, bitcoin.AddressType.P2SH_SEGWIT].includes(this._addressType)\n\n    for (let i = 0; i < inputs.length; i++) {\n      const wallet = await this.getWalletAddress(inputs[i].address)\n      const keyPair = await this.keyPair(wallet.derivationPath)\n      const paymentVariant = this.getPaymentVariantFromPublicKey(keyPair.publicKey)\n\n      const psbtInput: any = {\n        hash: inputs[i].txid,\n        index: inputs[i].vout,\n        sequence: 0\n      }\n\n      if (needsWitness) {\n        psbtInput.witnessUtxo = {\n          script: paymentVariant.output,\n          value: inputs[i].value\n        }\n      } else {\n        const inputTxRaw = await this.getMethod('getRawTransactionByHash')(inputs[i].txid)\n        psbtInput.nonWitnessUtxo = Buffer.from(inputTxRaw, 'hex')\n      }\n\n      if (this._addressType === bitcoin.AddressType.P2SH_SEGWIT) {\n        psbtInput.redeemScript = paymentVariant.redeem.output\n      }\n\n      psbt.addInput(psbtInput)\n    }\n\n    for (const output of targets) {\n      if (output.script) {\n        psbt.addOutput({\n          value: output.value,\n          script: output.script\n        })\n      } else {\n        psbt.addOutput({\n          value: output.value,\n          address: output.address\n        })\n      }\n    }\n\n    for (let i = 0; i < inputs.length; i++) {\n      const wallet = await this.getWalletAddress(inputs[i].address)\n      const keyPair = await this.keyPair(wallet.derivationPath)\n      psbt.signInput(i, keyPair)\n      psbt.validateSignaturesOfInput(i)\n    }\n\n    psbt.finalizeAllInputs()\n\n    return { hex: psbt.extractTransaction().toHex(), fee }\n  }\n\n  async _buildSweepTransaction(externalChangeAddress: string, feePerByte: number) {\n    let _feePerByte = feePerByte || null\n    if (!_feePerByte) _feePerByte = await this.getMethod('getFeePerByte')()\n\n    const { inputs, outputs, change } = await this.getInputsForAmount([], _feePerByte, [], 100, true)\n\n    if (change) {\n      throw new Error('There should not be any change for sweeping transaction')\n    }\n\n    const _outputs = [\n      {\n        address: externalChangeAddress,\n        value: outputs[0].value\n      }\n    ]\n\n    // @ts-ignore\n    return this._buildTransaction(_outputs, feePerByte, inputs)\n  }\n\n  async signPSBT(data: string, inputs: bitcoin.PsbtInputTarget[]) {\n    const psbt = Psbt.fromBase64(data, { network: this._network })\n    for (const input of inputs) {\n      const keyPair = await this.keyPair(input.derivationPath)\n      psbt.signInput(input.index, keyPair)\n    }\n    return psbt.toBase64()\n  }\n\n  async signBatchP2SHTransaction(\n    inputs: [{ inputTxHex: string; index: number; vout: any; outputScript: Buffer; txInputIndex?: number }],\n    addresses: string,\n    tx: any,\n    lockTime?: number,\n    segwit?: boolean\n  ) {\n    const keyPairs = []\n    for (const address of addresses) {\n      const wallet = await this.getWalletAddress(address)\n      const keyPair = await this.keyPair(wallet.derivationPath)\n      keyPairs.push(keyPair)\n    }\n\n    const sigs = []\n    for (let i = 0; i < inputs.length; i++) {\n      const index = inputs[i].txInputIndex ? inputs[i].txInputIndex : inputs[i].index\n      let sigHash\n      if (segwit) {\n        sigHash = tx.hashForWitnessV0(\n          index,\n          inputs[i].outputScript,\n          inputs[i].vout.vSat,\n          BitcoinJsTransaction.SIGHASH_ALL\n        )\n      } else {\n        sigHash = tx.hashForSignature(index, inputs[i].outputScript, BitcoinJsTransaction.SIGHASH_ALL)\n      }\n\n      const sig = script.signature.encode(keyPairs[i].sign(sigHash), BitcoinJsTransaction.SIGHASH_ALL)\n      sigs.push(sig)\n    }\n\n    return sigs\n  }\n\n  getScriptType() {\n    if (this._addressType === bitcoin.AddressType.LEGACY) return 'p2pkh'\n    else if (this._addressType === bitcoin.AddressType.P2SH_SEGWIT) return 'p2sh-p2wpkh'\n    else if (this._addressType === bitcoin.AddressType.BECH32) return 'p2wpkh'\n  }\n\n  async getConnectedNetwork() {\n    return this._network\n  }\n\n  async isWalletAvailable() {\n    return true\n  }\n}\n","import BitcoinJsWalletProvider from './BitcoinJsWalletProvider'\n\nexport { BitcoinJsWalletProvider }\n","module.exports = require(\"@liquality/bitcoin-wallet-provider\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/wallet-provider\");","module.exports = require(\"bip32\");","module.exports = require(\"bip39\");","module.exports = require(\"bitcoinjs-lib\");","module.exports = require(\"bitcoinjs-message\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["options","network","mnemonic","baseDerivationPath","addressType","bitcoin","AddressType","BECH32","Error","_mnemonic","seedNode","this","_seedNode","mnemonicToSeed","seed","fromSeed","_network","baseDerivationNode","_baseDerivationNode","baseNode","derivePath","_baseDerivationPath","keyPair","derivationPath","_toWIF","wif","ECPair","fromWIF","toWIF","exportPrivateKey","signMessage","message","from","getWalletAddress","address","privateKey","compressed","toString","_buildTransaction","targets","feePerByte","fixedInputs","getUnusedAddress","unusedAddress","getInputsForAmount","inputs","change","fee","push","value","psbt","Psbt","needsWitness","P2SH_SEGWIT","includes","_addressType","i","length","wallet","paymentVariant","getPaymentVariantFromPublicKey","publicKey","psbtInput","hash","txid","index","vout","sequence","witnessUtxo","script","output","getMethod","inputTxRaw","nonWitnessUtxo","Buffer","redeemScript","redeem","addInput","addOutput","signInput","validateSignaturesOfInput","finalizeAllInputs","hex","extractTransaction","toHex","_buildSweepTransaction","externalChangeAddress","_feePerByte","outputs","_outputs","signPSBT","data","fromBase64","input","toBase64","signBatchP2SHTransaction","addresses","tx","lockTime","segwit","keyPairs","sigs","txInputIndex","sigHash","hashForWitnessV0","outputScript","vSat","SIGHASH_ALL","hashForSignature","sig","signature","encode","sign","getScriptType","LEGACY","getConnectedNetwork","isWalletAvailable","BitcoinWalletProvider","WalletProvider","BitcoinJsWalletProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}