{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/bitcoin-node-wallet-provider/./lib/BitcoinNodeWalletProvider.ts","webpack://@liquality/bitcoin-node-wallet-provider/./lib/index.ts","webpack://@liquality/bitcoin-node-wallet-provider/external commonjs \"@liquality/bitcoin-networks\"","webpack://@liquality/bitcoin-node-wallet-provider/external commonjs \"@liquality/bitcoin-utils\"","webpack://@liquality/bitcoin-node-wallet-provider/external commonjs \"@liquality/crypto\"","webpack://@liquality/bitcoin-node-wallet-provider/external commonjs \"@liquality/jsonrpc-provider\"","webpack://@liquality/bitcoin-node-wallet-provider/external commonjs \"@liquality/types\"","webpack://@liquality/bitcoin-node-wallet-provider/external commonjs \"@liquality/wallet-provider\"","webpack://@liquality/bitcoin-node-wallet-provider/external commonjs \"bitcoinjs-lib\"","webpack://@liquality/bitcoin-node-wallet-provider/external commonjs \"lodash\"","webpack://@liquality/bitcoin-node-wallet-provider/webpack/bootstrap","webpack://@liquality/bitcoin-node-wallet-provider/webpack/startup"],"sourcesContent":["import { Psbt, ECPair, script, Transaction as BitcoinJsTransaction } from 'bitcoinjs-lib'\nimport { uniq, flatten, isString } from 'lodash'\nimport { WalletProvider } from '@liquality/wallet-provider'\nimport { JsonRpcProvider } from '@liquality/jsonrpc-provider'\nimport { bitcoin, SendOptions, BigNumber, Transaction, Address } from '@liquality/types'\nimport { BitcoinNetworks, BitcoinNetwork } from '@liquality/bitcoin-networks'\nimport { normalizeTransactionObject, decodeRawTransaction } from '@liquality/bitcoin-utils'\nimport { sha256 } from '@liquality/crypto'\n\nconst BIP70_CHAIN_TO_NETWORK: { [index: string]: BitcoinNetwork } = {\n  main: BitcoinNetworks.bitcoin,\n  test: BitcoinNetworks.bitcoin_testnet,\n  regtest: BitcoinNetworks.bitcoin_regtest\n}\n\ninterface ProviderOptions {\n  // RPC URI\n  uri: string\n  // Authentication username\n  username?: string\n  // Authentication password\n  password?: string\n  // Bitcoin network\n  network: BitcoinNetwork\n  // Address type. Default: bech32\n  addressType?: bitcoin.AddressType\n}\n\nexport default class BitcoinNodeWalletProvider extends WalletProvider {\n  _addressType: bitcoin.AddressType\n  _network: BitcoinNetwork\n  _rpc: JsonRpcProvider\n  _addressInfoCache: { [key: string]: Address }\n\n  constructor(opts: ProviderOptions) {\n    const { uri, username, password, network, addressType = bitcoin.AddressType.BECH32 } = opts\n    super({ network })\n    const addressTypes = Object.values(bitcoin.AddressType)\n    if (!addressTypes.includes(addressType)) {\n      throw new Error(`addressType must be one of ${addressTypes.join(',')}`)\n    }\n    this._addressType = addressType\n    this._network = network\n    this._rpc = new JsonRpcProvider(uri, username, password)\n    this._addressInfoCache = {}\n  }\n\n  async signMessage(message: string, from: string) {\n    return this._rpc\n      .jsonrpc('signmessage', from, message)\n      .then((result: string) => Buffer.from(result, 'base64').toString('hex'))\n  }\n\n  async withTxFee(func: () => Promise<Transaction<bitcoin.Transaction>>, feePerByte: number) {\n    const feePerKB = new BigNumber(feePerByte).div(1e8).times(1000).toNumber()\n    const originalTxFee: number = (await this._rpc.jsonrpc('getwalletinfo')).paytxfee\n    await this._rpc.jsonrpc('settxfee', feePerKB)\n\n    const result = await func()\n\n    await this._rpc.jsonrpc('settxfee', originalTxFee)\n\n    return result\n  }\n\n  async _sendTransaction(options: SendOptions) {\n    const value = new BigNumber(options.value).dividedBy(1e8).toNumber()\n    const hash = await this._rpc.jsonrpc('sendtoaddress', options.to, value, '', '', false, true)\n    const transaction = await this._rpc.jsonrpc('gettransaction', hash, true)\n    const fee = new BigNumber(transaction.fee).abs().times(1e8).toNumber()\n    return normalizeTransactionObject(decodeRawTransaction(transaction.hex, this._network), fee)\n  }\n\n  async sendTransaction(options: SendOptions) {\n    return options.fee\n      ? this.withTxFee(async () => this._sendTransaction(options), options.fee)\n      : this._sendTransaction(options)\n  }\n\n  async updateTransactionFee(tx: Transaction<bitcoin.Transaction>, newFeePerByte: number) {\n    const txHash = isString(tx) ? tx : tx.hash\n    return this.withTxFee(async () => {\n      const result = await this._rpc.jsonrpc('bumpfee', txHash)\n      const transaction = await this._rpc.jsonrpc('gettransaction', result.txid, true)\n      const fee = new BigNumber(transaction.fee).abs().times(1e8).toNumber()\n      return normalizeTransactionObject(decodeRawTransaction(transaction.hex, this._network), fee)\n    }, newFeePerByte)\n  }\n\n  async signPSBT(data: string, inputs: bitcoin.PsbtInputTarget[]) {\n    const psbt = Psbt.fromBase64(data, { network: this._network })\n\n    for (const input of inputs) {\n      const usedAddresses = await this.getUsedAddresses()\n      const address = usedAddresses.find((address) => address.derivationPath === input.derivationPath)\n      const wif = await this.dumpPrivKey(address.address)\n      const keyPair = ECPair.fromWIF(wif, this._network)\n      psbt.signInput(input.index, keyPair)\n    }\n\n    return psbt.toBase64()\n  }\n\n  async signBatchP2SHTransaction(\n    inputs: [{ inputTxHex: string; index: number; vout: any; outputScript: Buffer }],\n    addresses: string,\n    tx: any,\n    locktime: number,\n    segwit = false\n  ) {\n    const wallets = []\n    for (const address of addresses) {\n      const wif = await this.dumpPrivKey(address)\n      const wallet = ECPair.fromWIF(wif, this._network)\n      wallets.push(wallet)\n    }\n\n    const sigs = []\n    for (let i = 0; i < inputs.length; i++) {\n      let sigHash\n      if (segwit) {\n        sigHash = tx.hashForWitnessV0(\n          inputs[i].index,\n          inputs[i].outputScript,\n          inputs[i].vout.vSat,\n          BitcoinJsTransaction.SIGHASH_ALL\n        ) // AMOUNT NEEDS TO BE PREVOUT AMOUNT\n      } else {\n        sigHash = tx.hashForSignature(inputs[i].index, inputs[i].outputScript, BitcoinJsTransaction.SIGHASH_ALL)\n      }\n\n      const sig = script.signature.encode(wallets[i].sign(sigHash), BitcoinJsTransaction.SIGHASH_ALL)\n      sigs.push(sig)\n    }\n\n    return sigs\n  }\n\n  async dumpPrivKey(address: string): Promise<string> {\n    return this._rpc.jsonrpc('dumpprivkey', address)\n  }\n\n  async getNewAddress(addressType: bitcoin.AddressType, label = '') {\n    const params = addressType ? [label, addressType] : [label]\n    const newAddress = await this._rpc.jsonrpc('getnewaddress', ...params)\n\n    if (!newAddress) return null\n\n    return this.getAddressInfo(newAddress)\n  }\n\n  async getAddressInfo(address: string): Promise<Address> {\n    if (address in this._addressInfoCache) {\n      return this._addressInfoCache[address]\n    }\n\n    const addressInfo: bitcoin.rpc.AddressInfo = await this._rpc.jsonrpc('getaddressinfo', address)\n\n    let publicKey, derivationPath\n\n    if (!addressInfo.iswatchonly) {\n      publicKey = addressInfo.pubkey\n      derivationPath = addressInfo.hdkeypath\n    }\n    const addressObject = new Address({ address, publicKey, derivationPath })\n    this._addressInfoCache[address] = addressObject\n    return addressObject\n  }\n\n  async getAddresses() {\n    return this.getUsedAddresses()\n  }\n\n  async getUnusedAddress() {\n    return this.getNewAddress(this._addressType)\n  }\n\n  async getUsedAddresses() {\n    const usedAddresses: bitcoin.rpc.AddressGrouping[] = await this._rpc.jsonrpc('listaddressgroupings')\n    const emptyAddresses: bitcoin.rpc.ReceivedByAddress[] = await this._rpc.jsonrpc(\n      'listreceivedbyaddress',\n      0,\n      true,\n      false\n    )\n\n    const addrs = uniq([...flatten(usedAddresses).map((addr) => addr[0]), ...emptyAddresses.map((a) => a.address)])\n\n    const addressObjects = await Promise.all(addrs.map((address) => this.getAddressInfo(address)))\n\n    return addressObjects\n  }\n\n  async getWalletAddress(address: string) {\n    return this.getAddressInfo(address)\n  }\n\n  async isWalletAvailable() {\n    try {\n      await this._rpc.jsonrpc('getwalletinfo')\n      return true\n    } catch (e) {\n      return false\n    }\n  }\n\n  async getConnectedNetwork() {\n    const blockchainInfo = await this._rpc.jsonrpc('getblockchaininfo')\n    const chain = blockchainInfo.chain\n    return BIP70_CHAIN_TO_NETWORK[chain]\n  }\n\n  async generateSecret(message: string) {\n    const secretAddressLabel = 'secretAddress'\n    let address\n    try {\n      const labelAddresses = await this._rpc.jsonrpc('getaddressesbylabel', secretAddressLabel)\n      address = Object.keys(labelAddresses)[0]\n    } catch (e) {\n      // Label does not exist\n      address = (await this.getNewAddress(bitcoin.AddressType.LEGACY, secretAddressLabel)).address // Signing only possible with legacy addresses\n    }\n    const signedMessage = await this.signMessage(message, address)\n    const secret = sha256(signedMessage)\n    return secret\n  }\n}\n","import BitcoinNodeWalletProvider from './BitcoinNodeWalletProvider'\n\nexport { BitcoinNodeWalletProvider }\n","module.exports = require(\"@liquality/bitcoin-networks\");","module.exports = require(\"@liquality/bitcoin-utils\");","module.exports = require(\"@liquality/crypto\");","module.exports = require(\"@liquality/jsonrpc-provider\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/wallet-provider\");","module.exports = require(\"bitcoinjs-lib\");","module.exports = require(\"lodash\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["BIP70_CHAIN_TO_NETWORK","main","BitcoinNetworks","bitcoin","test","bitcoin_testnet","regtest","bitcoin_regtest","opts","uri","username","password","network","addressType","AddressType","BECH32","addressTypes","Object","values","includes","Error","join","_addressType","_network","_rpc","JsonRpcProvider","_addressInfoCache","signMessage","message","from","this","jsonrpc","then","result","Buffer","toString","withTxFee","func","feePerByte","feePerKB","BigNumber","div","times","toNumber","originalTxFee","paytxfee","_sendTransaction","options","value","dividedBy","to","hash","transaction","fee","abs","normalizeTransactionObject","decodeRawTransaction","hex","sendTransaction","updateTransactionFee","tx","newFeePerByte","txHash","isString","txid","signPSBT","data","inputs","psbt","Psbt","fromBase64","input","getUsedAddresses","usedAddresses","address","find","derivationPath","dumpPrivKey","wif","keyPair","ECPair","fromWIF","signInput","index","toBase64","signBatchP2SHTransaction","addresses","locktime","segwit","wallets","wallet","push","sigs","i","length","sigHash","hashForWitnessV0","outputScript","vout","vSat","SIGHASH_ALL","hashForSignature","sig","script","signature","encode","sign","getNewAddress","label","params","newAddress","getAddressInfo","addressInfo","iswatchonly","publicKey","pubkey","hdkeypath","addressObject","Address","getAddresses","getUnusedAddress","emptyAddresses","addrs","uniq","flatten","map","addr","a","Promise","all","getWalletAddress","isWalletAvailable","getConnectedNetwork","blockchainInfo","chain","generateSecret","secretAddressLabel","labelAddresses","keys","LEGACY","signedMessage","sha256","WalletProvider","BitcoinNodeWalletProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}