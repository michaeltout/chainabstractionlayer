{"version":3,"file":"index.js","mappings":"y7DACA,aAEA,SACA,SAGA,cAIE,WAAYA,EAAuBC,GAAnC,MACE,YAAM,CACJC,QAASF,EAAQG,UACjBC,aAAc,OACdC,uBAAmBC,KACnB,K,OAEF,EAAKC,SAAWP,EAChB,EAAKQ,OAASP,E,EAmFlB,OA/FmD,OAe3C,YAAAQ,4BAAN,SAAkCC,G,sGAKX,OAJrB,EAAAC,mBAAmBD,GAEXE,EAAkBF,EAAU,cAEf,GAAMG,KAAKC,2BAA2BF,I,OAE3D,IAFMG,EAAe,SAEZC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IAGvC,GAFME,EAAW,EAAAC,qBAAqBJ,EAAaC,GAAIH,KAAKL,QAExD,EAAAY,+BAA+BV,EAAYQ,EAASG,MACtD,MAAO,CAAP,EAAOH,GAIX,MAAO,CAAP,EAAO,cAGH,YAAAI,yBAAN,SACEZ,EACAa,G,wGAIe,OAFf,EAAAZ,mBAAmBD,GAEJ,GAAMG,KAAKW,UAAU,uBAAfX,CAAuCU,I,OAIvC,OAJfE,EAAS,SAEPC,EAAoBD,EAAOJ,KAAI,gBAElB,GAAMR,KAAKC,2BAA2BY,I,OAE3D,IAFMX,EAAe,SAEZC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IAGvC,IAFME,EAAW,EAAAC,qBAAqBJ,EAAaC,GAAIH,KAAKL,SAE/CmB,OAEX,OADA,EAAAC,sBAAsBV,EAASS,OAAQjB,EAAWmB,YAC3C,CAAP,EAAOX,GAIX,MAAO,CAAP,EAAO,cAGH,YAAAY,0BAAN,SACEpB,EACAa,G,8GAIe,OAFf,EAAAZ,mBAAmBD,GAEJ,GAAMG,KAAKW,UAAU,uBAAfX,CAAuCU,I,OAIvC,OAJfE,EAAS,SAEPC,EAAoBD,EAAOJ,KAAI,gBAElB,GAAMR,KAAKC,2BAA2BY,I,OAE3D,IAFMX,EAAe,SAEZC,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IAGvC,GAFME,EAAW,EAAAC,qBAAqBJ,EAAaC,GAAIH,KAAKL,QAEpC,QAApB,EAAAU,EAASG,KAAKU,cAAM,eAAEC,OACxB,MAAO,CAAP,EAAOd,GAIX,MAAO,CAAP,EAAO,cAGH,YAAAe,wBAAN,W,mEACE,MAAO,CAAP,EAAO,aAGH,YAAAnB,2BAAN,SAAiCoB,G,kGAGd,OAFXC,EAAStB,KAAKN,SAASJ,UAAS,gBAAgB,EAAAiC,gBAAgBF,GAAQ,aAE7D,GAAMrB,KAAKwB,QAAQF,I,OAEpC,KAAKG,OAFCA,EAAW,eAEJ,EAARA,EAAUC,KACb,MAAM,IAAI,EAAAC,gBAAgB,2BAA2BN,GAGvD,MAAO,CAAP,EAAOI,EAASC,aAEpB,EA/FA,CAFA,OAEmDE,c,qMCPnD,gBACS,EAAAC,sBADF,W,QCAPC,EAAOC,QAAUC,QAAQ,sB,QCAzBF,EAAOC,QAAUC,QAAQ,6B,QCAzBF,EAAOC,QAAUC,QAAQ,2B,QCAzBF,EAAOC,QAAUC,QAAQ,sBCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqB3C,IAAjB4C,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,K","sources":["webpack://@liquality/terra-swap-find-provider/./lib/TerraSwapFindProvider.ts","webpack://@liquality/terra-swap-find-provider/./lib/index.ts","webpack://@liquality/terra-swap-find-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/terra-swap-find-provider/external commonjs \"@liquality/node-provider\"","webpack://@liquality/terra-swap-find-provider/external commonjs \"@liquality/terra-utils\"","webpack://@liquality/terra-swap-find-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/terra-swap-find-provider/webpack/bootstrap","webpack://@liquality/terra-swap-find-provider/webpack/startup"],"sourcesContent":["import { Address, SwapParams, SwapProvider, terra, Transaction } from '@liquality/types'\nimport { addressToString, validateSecretAndHash } from '@liquality/utils'\nimport { TerraNetwork } from '@liquality/terra-networks'\nimport { normalizeTransaction, doesTransactionMatchInitiation, validateSwapParams } from '@liquality/terra-utils'\nimport { TxNotFoundError } from '@liquality/errors'\nimport { NodeProvider } from '@liquality/node-provider'\n\nexport default class TerraSwapFindProvider extends NodeProvider implements Partial<SwapProvider> {\n  private _network: TerraNetwork\n  private _asset: string\n\n  constructor(network: TerraNetwork, asset: string) {\n    super({\n      baseURL: network.helperUrl,\n      responseType: 'text',\n      transformResponse: undefined\n    })\n\n    this._network = network\n    this._asset = asset\n  }\n\n  async findInitiateSwapTransaction(swapParams: SwapParams): Promise<Transaction<terra.InputTransaction>> {\n    validateSwapParams(swapParams)\n\n    const { refundAddress } = swapParams\n\n    const transactions = await this._getTransactionsForAddress(refundAddress)\n\n    for (let i = 0; i < transactions.length; i++) {\n      const parsedTx = normalizeTransaction(transactions[i], this._asset)\n\n      if (doesTransactionMatchInitiation(swapParams, parsedTx._raw)) {\n        return parsedTx\n      }\n    }\n\n    return null\n  }\n\n  async findClaimSwapTransaction(\n    swapParams: SwapParams,\n    initiationTxHash: string\n  ): Promise<Transaction<terra.InputTransaction>> {\n    validateSwapParams(swapParams)\n\n    const initTx = await this.getMethod('getTransactionByHash')(initiationTxHash)\n\n    const { contractAddress } = initTx._raw\n\n    const transactions = await this._getTransactionsForAddress(contractAddress)\n\n    for (let i = 0; i < transactions.length; i++) {\n      const parsedTx = normalizeTransaction(transactions[i], this._asset)\n\n      if (parsedTx.secret) {\n        validateSecretAndHash(parsedTx.secret, swapParams.secretHash)\n        return parsedTx\n      }\n    }\n\n    return null\n  }\n\n  async findRefundSwapTransaction(\n    swapParams: SwapParams,\n    initiationTxHash: string\n  ): Promise<Transaction<terra.InputTransaction>> {\n    validateSwapParams(swapParams)\n\n    const initTx = await this.getMethod('getTransactionByHash')(initiationTxHash)\n\n    const { contractAddress } = initTx._raw\n\n    const transactions = await this._getTransactionsForAddress(contractAddress)\n\n    for (let i = 0; i < transactions.length; i++) {\n      const parsedTx = normalizeTransaction(transactions[i], this._asset)\n\n      if (parsedTx._raw.method?.refund) {\n        return parsedTx\n      }\n    }\n\n    return null\n  }\n\n  async findFundSwapTransaction(): Promise<null> {\n    return null\n  }\n\n  async _getTransactionsForAddress(address: Address | string): Promise<any[]> {\n    const url = `${this._network.helperUrl}/txs?account=${addressToString(address)}&limit=100`\n\n    const response = await this.nodeGet(url)\n\n    if (!response?.txs) {\n      throw new TxNotFoundError(`Transactions not found: ${address}`)\n    }\n\n    return response.txs\n  }\n}\n","import TerraSwapFindProvider from './TerraSwapFindProvider'\nexport { TerraSwapFindProvider }\n","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/node-provider\");","module.exports = require(\"@liquality/terra-utils\");","module.exports = require(\"@liquality/utils\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["network","asset","baseURL","helperUrl","responseType","transformResponse","undefined","_network","_asset","findInitiateSwapTransaction","swapParams","validateSwapParams","refundAddress","this","_getTransactionsForAddress","transactions","i","length","parsedTx","normalizeTransaction","doesTransactionMatchInitiation","_raw","findClaimSwapTransaction","initiationTxHash","getMethod","initTx","contractAddress","secret","validateSecretAndHash","secretHash","findRefundSwapTransaction","method","refund","findFundSwapTransaction","address","url","addressToString","nodeGet","response","txs","TxNotFoundError","NodeProvider","TerraSwapFindProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}