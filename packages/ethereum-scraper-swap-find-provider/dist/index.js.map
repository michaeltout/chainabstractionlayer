{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/ethereum-scraper-swap-find-provider/./lib/EthereumScraperSwapFindProvider.ts","webpack://@liquality/ethereum-scraper-swap-find-provider/./lib/index.ts","webpack://@liquality/ethereum-scraper-swap-find-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/ethereum-scraper-swap-find-provider/external commonjs \"@liquality/ethereum-utils\"","webpack://@liquality/ethereum-scraper-swap-find-provider/external commonjs \"@liquality/node-provider\"","webpack://@liquality/ethereum-scraper-swap-find-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/ethereum-scraper-swap-find-provider/webpack/bootstrap","webpack://@liquality/ethereum-scraper-swap-find-provider/webpack/startup"],"sourcesContent":["import { NodeProvider } from '@liquality/node-provider'\nimport {\n  numberToHex,\n  normalizeTransactionObject,\n  validateAddress,\n  validateExpiration,\n  remove0x\n} from '@liquality/ethereum-utils'\nimport { addressToString, validateValue, validateSecretHash, validateSecretAndHash } from '@liquality/utils'\nimport { PendingTxError } from '@liquality/errors'\nimport { SwapProvider, SwapParams, Transaction, ethereum } from '@liquality/types'\nimport * as scraper from './types'\n\nexport default class EthereumScraperSwapFindProvider extends NodeProvider implements Partial<SwapProvider> {\n  constructor(url: string) {\n    super({\n      baseURL: url,\n      responseType: 'text',\n      transformResponse: undefined // https://github.com/axios/axios/issues/907,\n    })\n  }\n\n  normalizeTransactionResponse(tx: any): Transaction<scraper.Transaction> {\n    const txRaw: scraper.Transaction = {\n      from: tx.from,\n      to: tx.to,\n      hash: tx.hash,\n      secret: tx.secret,\n      blockHash: tx.blockHash,\n      blockNumber: numberToHex(tx.blockNumber),\n      status: tx.status === true ? '0x1' : '0x0',\n      input: tx.input,\n      contractAddress: tx.contractAddress,\n      timestamp: numberToHex(tx.timestamp),\n      value: numberToHex(tx.value),\n      confirmations: tx.confirmations\n    }\n    const normalizedTransaction = normalizeTransactionObject(txRaw)\n    normalizedTransaction.confirmations = txRaw.confirmations\n\n    if (normalizedTransaction._raw.contractAddress) {\n      normalizedTransaction._raw.contractAddress = normalizedTransaction._raw.contractAddress.toLowerCase()\n    }\n\n    if (normalizedTransaction._raw.secret) {\n      normalizedTransaction.secret = remove0x(normalizedTransaction._raw.secret)\n    }\n\n    return normalizedTransaction\n  }\n\n  async ensureFeeInfo(tx: Transaction<scraper.Transaction>) {\n    if (!(tx.fee && tx.feePrice)) {\n      const { fee, feePrice, _raw } = await this.getMethod('getTransactionByHash')(tx.hash)\n\n      tx._raw.gas = _raw.gas\n      tx._raw.gasPrice = _raw.gasPrice\n\n      tx.fee = fee\n      tx.feePrice = feePrice\n    }\n\n    return tx\n  }\n\n  async findAddressTransaction(\n    address: string,\n    predicate: (tx: Transaction<scraper.Transaction>) => boolean,\n    fromBlock?: number,\n    toBlock?: number,\n    limit = 250,\n    sort = 'desc'\n  ) {\n    for (let page = 1; ; page++) {\n      const data = await this.nodeGet(`/txs/${address}`, {\n        limit,\n        page,\n        sort,\n        fromBlock,\n        toBlock\n      })\n\n      const transactions: any[] = data.data.txs\n      if (transactions.length === 0) return\n\n      const normalizedTransactions = transactions\n        .filter((tx) => tx.status === true)\n        .map(this.normalizeTransactionResponse)\n      const tx = normalizedTransactions.find(predicate)\n      if (tx) return this.ensureFeeInfo(tx)\n\n      if (transactions.length < limit) return\n    }\n  }\n\n  async findAddressEvent(type: string, contractAddress: string) {\n    const data = await this.nodeGet(`/events/${type}/${contractAddress}`)\n    const { tx } = data.data\n\n    if (tx && tx.status === true) {\n      return this.ensureFeeInfo(this.normalizeTransactionResponse(tx))\n    }\n  }\n\n  async findInitiateSwapTransaction(swapParams: SwapParams) {\n    this.validateSwapParams(swapParams)\n\n    return this.findAddressTransaction(addressToString(swapParams.refundAddress), (tx) =>\n      this.getMethod('doesTransactionMatchInitiation')(swapParams, tx)\n    )\n  }\n\n  validateSwapParams(swapParams: SwapParams) {\n    validateValue(swapParams.value)\n    validateAddress(swapParams.recipientAddress)\n    validateAddress(swapParams.refundAddress)\n    validateSecretHash(swapParams.secretHash)\n    validateExpiration(swapParams.expiration)\n  }\n\n  async findClaimSwapTransaction(swapParams: SwapParams, initiationTxHash: string) {\n    this.validateSwapParams(swapParams)\n\n    const initiationTransactionReceipt = await this.getMethod('getTransactionReceipt')(initiationTxHash)\n    if (!initiationTransactionReceipt)\n      throw new PendingTxError(`Transaction receipt is not available: ${initiationTxHash}`)\n\n    const tx = await this.findAddressEvent('swapClaim', initiationTransactionReceipt.contractAddress)\n\n    if (tx) {\n      validateSecretAndHash(tx.secret, swapParams.secretHash)\n      return tx\n    }\n  }\n\n  async findRefundSwapTransaction(swapParams: SwapParams, initiationTxHash: string) {\n    this.validateSwapParams(swapParams)\n\n    const initiationTransactionReceipt: ethereum.TransactionReceipt = await this.getMethod('getTransactionReceipt')(\n      initiationTxHash\n    )\n    if (!initiationTransactionReceipt)\n      throw new PendingTxError(`Transaction receipt is not available: ${initiationTxHash}`)\n\n    return this.findAddressEvent('swapRefund', initiationTransactionReceipt.contractAddress)\n  }\n\n  doesBlockScan() {\n    return false\n  }\n}\n","import EthereumScraperSwapFindProvider from './EthereumScraperSwapFindProvider'\nimport * as scraper from './types'\n\nexport { EthereumScraperSwapFindProvider, scraper }\n","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/ethereum-utils\");","module.exports = require(\"@liquality/node-provider\");","module.exports = require(\"@liquality/utils\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["url","baseURL","responseType","transformResponse","undefined","normalizeTransactionResponse","tx","txRaw","from","to","hash","secret","blockHash","blockNumber","numberToHex","status","input","contractAddress","timestamp","value","confirmations","normalizedTransaction","normalizeTransactionObject","_raw","toLowerCase","remove0x","ensureFeeInfo","fee","feePrice","this","getMethod","gas","gasPrice","findAddressTransaction","address","predicate","fromBlock","toBlock","limit","sort","page","nodeGet","data","transactions","txs","length","normalizedTransactions","filter","map","find","findAddressEvent","type","findInitiateSwapTransaction","swapParams","validateSwapParams","addressToString","refundAddress","validateValue","validateAddress","recipientAddress","validateSecretHash","secretHash","validateExpiration","expiration","findClaimSwapTransaction","initiationTxHash","initiationTransactionReceipt","PendingTxError","validateSecretAndHash","findRefundSwapTransaction","doesBlockScan","NodeProvider","EthereumScraperSwapFindProvider","scraper","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}