{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/ethereum-js-wallet-provider/./lib/EthereumJsWalletProvider.ts","webpack://@liquality/ethereum-js-wallet-provider/./lib/index.ts","webpack://@liquality/ethereum-js-wallet-provider/external commonjs \"@liquality/ethereum-utils\"","webpack://@liquality/ethereum-js-wallet-provider/external commonjs \"@liquality/types\"","webpack://@liquality/ethereum-js-wallet-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/ethereum-js-wallet-provider/external commonjs \"@liquality/wallet-provider\"","webpack://@liquality/ethereum-js-wallet-provider/external commonjs \"bip39\"","webpack://@liquality/ethereum-js-wallet-provider/external commonjs \"ethereumjs-common\"","webpack://@liquality/ethereum-js-wallet-provider/external commonjs \"ethereumjs-common/dist/chains\"","webpack://@liquality/ethereum-js-wallet-provider/external commonjs \"ethereumjs-tx\"","webpack://@liquality/ethereum-js-wallet-provider/external commonjs \"ethereumjs-util\"","webpack://@liquality/ethereum-js-wallet-provider/external commonjs \"hdkey\"","webpack://@liquality/ethereum-js-wallet-provider/webpack/bootstrap","webpack://@liquality/ethereum-js-wallet-provider/webpack/startup"],"sourcesContent":["import { WalletProvider } from '@liquality/wallet-provider'\nimport { EthereumNetwork } from '@liquality/ethereum-networks'\nimport { Network, Address, SendOptions, ethereum, Transaction, BigNumber } from '@liquality/types'\nimport { addressToString } from '@liquality/utils'\nimport {\n  remove0x,\n  buildTransaction,\n  numberToHex,\n  hexToNumber,\n  normalizeTransactionObject\n} from '@liquality/ethereum-utils'\n\nimport { mnemonicToSeed } from 'bip39'\nimport hdkey from 'hdkey'\nimport { hashPersonalMessage, ecsign, toRpcSig, privateToAddress, privateToPublic } from 'ethereumjs-util'\n/// <reference path=\"../node_modules/ethereumjs-tx/dist/index.d.ts\" />\nimport { Transaction as EthJsTransaction } from 'ethereumjs-tx'\nimport Common from 'ethereumjs-common'\nimport { chains as BaseChains } from 'ethereumjs-common/dist/chains'\n\ninterface EthereumJsWalletProviderOptions {\n  network: EthereumNetwork\n  mnemonic: string\n  derivationPath: string\n  hardfork?: string\n}\n\nexport default class EthereumJsWalletProvider extends WalletProvider {\n  _derivationPath: string\n  _mnemonic: string\n  _network: EthereumNetwork\n  _hardfork: string\n\n  constructor(options: EthereumJsWalletProviderOptions) {\n    const { network, mnemonic, derivationPath, hardfork = 'istanbul' } = options\n    super({ network })\n\n    this._derivationPath = derivationPath\n    this._mnemonic = mnemonic\n    this._network = network\n    this._hardfork = hardfork\n  }\n\n  async node() {\n    const seed = await mnemonicToSeed(this._mnemonic)\n    return hdkey.fromMasterSeed(seed)\n  }\n\n  async hdKey() {\n    const node = await this.node()\n    return node.derive(this._derivationPath)\n  }\n\n  async exportPrivateKey() {\n    const { privateKey } = await this.hdKey()\n    return privateKey.toString('hex')\n  }\n\n  async signMessage(message: string) {\n    const hdKey = await this.hdKey()\n    const msgHash = hashPersonalMessage(Buffer.from(message))\n\n    const { v, r, s } = ecsign(msgHash, hdKey.privateKey)\n\n    return remove0x(toRpcSig(v, r, s))\n  }\n\n  async getAddresses() {\n    const hdKey = await this.hdKey()\n    const address = privateToAddress(hdKey.privateKey).toString('hex')\n    const publicKey = privateToPublic(hdKey.privateKey).toString('hex')\n    return [\n      new Address({\n        address,\n        derivationPath: this._derivationPath,\n        publicKey\n      })\n    ]\n  }\n\n  async getUnusedAddress() {\n    const addresses = await this.getAddresses()\n    return addresses[0]\n  }\n\n  async getUsedAddresses() {\n    return this.getAddresses()\n  }\n\n  async signTransaction(txData: ethereum.TransactionRequest): Promise<string> {\n    const hdKey = await this.hdKey()\n\n    let common\n    if (!(this._network.name === 'local')) {\n      const baseChain = this._network.name in BaseChains ? this._network.name : 'mainnet'\n      common = Common.forCustomChain(\n        baseChain,\n        {\n          ...this._network\n        },\n        this._hardfork\n      )\n    }\n\n    const tx = new EthJsTransaction(txData, { common })\n    tx.sign(hdKey.privateKey)\n\n    return tx.serialize().toString('hex')\n  }\n\n  async sendTransaction(options: SendOptions) {\n    const addresses = await this.getAddresses()\n    const from = addresses[0].address\n\n    const [nonce, gasPrice] = await Promise.all([\n      this.getMethod('getTransactionCount')(remove0x(from), 'pending'),\n      options.fee ? Promise.resolve(new BigNumber(options.fee)) : this.getMethod('getGasPrice')()\n    ])\n\n    const txOptions: ethereum.UnsignedTransaction = {\n      from,\n      to: options.to ? addressToString(options.to) : (options.to as string),\n      value: options.value,\n      data: options.data,\n      gasPrice,\n      nonce\n    }\n\n    const txData = buildTransaction(txOptions)\n    const gas = await this.getMethod('estimateGas')(txData)\n    txData.gas = numberToHex(gas)\n\n    const serializedTx = await this.signTransaction(txData)\n    const txHash = await this.getMethod('sendRawTransaction')(serializedTx)\n\n    const txWithHash: ethereum.PartialTransaction = {\n      ...txData,\n      input: txData.data,\n      hash: txHash\n    }\n    return normalizeTransactionObject(txWithHash)\n  }\n\n  async sendSweepTransaction(address: Address | ethereum.Address, _gasPrice: number) {\n    const addresses = await this.getAddresses()\n\n    const balance = await this.client.chain.getBalance(addresses)\n\n    const [gasPrice] = await Promise.all([_gasPrice ? Promise.resolve(_gasPrice) : this.getMethod('getGasPrice')()])\n\n    const fees = gasPrice.times(21000).times('1000000000')\n    const amountToSend = balance.minus(fees)\n\n    const sendOptions: SendOptions = {\n      to: address,\n      value: amountToSend,\n      data: null,\n      fee: gasPrice\n    }\n\n    return this.sendTransaction(sendOptions)\n  }\n\n  async updateTransactionFee(tx: Transaction<ethereum.PartialTransaction> | string, newGasPrice: number) {\n    const transaction: Transaction<ethereum.Transaction> =\n      typeof tx === 'string' ? await this.getMethod('getTransactionByHash')(tx) : tx\n\n    const txOptions: ethereum.UnsignedTransaction = {\n      from: transaction._raw.from,\n      to: transaction._raw.to,\n      value: new BigNumber(transaction._raw.value),\n      gasPrice: new BigNumber(newGasPrice),\n      data: transaction._raw.input,\n      nonce: hexToNumber(transaction._raw.nonce)\n    }\n\n    const txData = await buildTransaction(txOptions)\n    const gas = await this.getMethod('estimateGas')(txData)\n    txData.gas = numberToHex(gas)\n\n    const serializedTx = await this.signTransaction(txData)\n    const newTxHash = await this.getMethod('sendRawTransaction')(serializedTx)\n\n    const txWithHash: ethereum.PartialTransaction = {\n      ...txData,\n      input: txData.data,\n      hash: newTxHash\n    }\n\n    return normalizeTransactionObject(txWithHash)\n  }\n\n  async isWalletAvailable(): Promise<boolean> {\n    return true\n  }\n\n  async getConnectedNetwork(): Promise<Network> {\n    return this._network\n  }\n}\n","import EthereumJsWalletProvider from './EthereumJsWalletProvider'\n\nexport { EthereumJsWalletProvider }\n","module.exports = require(\"@liquality/ethereum-utils\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"@liquality/wallet-provider\");","module.exports = require(\"bip39\");","module.exports = require(\"ethereumjs-common\");","module.exports = require(\"ethereumjs-common/dist/chains\");","module.exports = require(\"ethereumjs-tx\");","module.exports = require(\"ethereumjs-util\");","module.exports = require(\"hdkey\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["options","network","mnemonic","derivationPath","hardfork","_derivationPath","_mnemonic","_network","_hardfork","node","mnemonicToSeed","this","seed","fromMasterSeed","hdKey","derive","exportPrivateKey","toString","signMessage","message","msgHash","hashPersonalMessage","Buffer","from","ecsign","privateKey","v","r","s","remove0x","toRpcSig","getAddresses","address","privateToAddress","publicKey","privateToPublic","Address","getUnusedAddress","getUsedAddresses","signTransaction","txData","name","baseChain","common","forCustomChain","tx","sign","serialize","sendTransaction","addresses","Promise","all","getMethod","fee","resolve","BigNumber","nonce","gasPrice","txOptions","to","addressToString","value","data","buildTransaction","gas","numberToHex","serializedTx","txHash","txWithHash","input","hash","normalizeTransactionObject","sendSweepTransaction","_gasPrice","client","chain","getBalance","balance","fees","times","amountToSend","minus","sendOptions","updateTransactionFee","newGasPrice","transaction","_raw","hexToNumber","newTxHash","isWalletAvailable","getConnectedNetwork","WalletProvider","EthereumJsWalletProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}