{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/solana-rpc-provider/./lib/SolanaRpcProvider.ts","webpack://@liquality/solana-rpc-provider/./lib/index.ts","webpack://@liquality/solana-rpc-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/solana-rpc-provider/external commonjs \"@liquality/node-provider\"","webpack://@liquality/solana-rpc-provider/external commonjs \"@liquality/solana-utils\"","webpack://@liquality/solana-rpc-provider/external commonjs \"@liquality/types\"","webpack://@liquality/solana-rpc-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/solana-rpc-provider/external commonjs \"@solana/web3.js\"","webpack://@liquality/solana-rpc-provider/webpack/bootstrap","webpack://@liquality/solana-rpc-provider/webpack/startup"],"sourcesContent":["import { NodeProvider as NodeProvider } from '@liquality/node-provider'\nimport {\n  BigNumber,\n  ChainProvider,\n  Address,\n  Block,\n  Transaction,\n  solana,\n  FeeDetails,\n  FeeProvider\n} from '@liquality/types'\nimport { SolanaNetwork } from '@liquality/solana-networks'\nimport { TxNotFoundError } from '@liquality/errors'\nimport { normalizeBlock, normalizeTransaction } from '@liquality/solana-utils'\n\nimport {\n  Connection,\n  PublicKey,\n  AccountInfo,\n  Transaction as SolTransaction,\n  Keypair,\n  BpfLoader,\n  BPF_LOADER_PROGRAM_ID,\n  ConfirmedSignatureInfo,\n  Signer\n} from '@solana/web3.js'\n\nimport { addressToString } from '@liquality/utils'\n\nexport default class SolanaRpcProvider extends NodeProvider implements FeeProvider, Partial<ChainProvider> {\n  _network: SolanaNetwork\n  connection: Connection\n\n  constructor(network: SolanaNetwork) {\n    super({\n      baseURL: network.helperUrl,\n      responseType: 'text',\n      transformResponse: undefined\n    })\n    this.connection = new Connection(network.nodeUrl)\n    this._network = network\n  }\n\n  async generateBlock(numberOfBlocks: number): Promise<void> {\n    await new Promise((resolve) => setTimeout(resolve, numberOfBlocks * 20000))\n  }\n\n  async getBlockByHash(): Promise<Block> {\n    throw new Error('Method not implemented.')\n  }\n\n  async getBlockByNumber(blockNumber: number, includeTx?: boolean): Promise<Block> {\n    const block = await this.connection.getBlock(blockNumber)\n\n    const normalizedBlock = normalizeBlock(block)\n\n    if (!includeTx) {\n      return normalizedBlock\n    }\n\n    normalizedBlock.transactions = await this._includeTransactions(blockNumber)\n    return normalizedBlock\n  }\n\n  async getBlockHeight(): Promise<number> {\n    return await this.connection.getSlot()\n  }\n\n  async getTransactionByHash(txHash: string): Promise<Transaction> {\n    const [tx, signatureStatus] = await Promise.all([\n      this.connection.getParsedConfirmedTransaction(txHash),\n      this.connection.getSignatureStatus(txHash, { searchTransactionHistory: true })\n    ])\n\n    if (!tx) {\n      throw new TxNotFoundError(`Transaction not found: ${txHash}`)\n    }\n\n    return normalizeTransaction(tx, signatureStatus)\n  }\n\n  async getTransactionReceipt(txHashes: string[]): Promise<Transaction<solana.InputTransaction>[]> {\n    const transactions = await this.connection.getParsedConfirmedTransactions(txHashes)\n\n    if (transactions.includes(null)) {\n      throw new TxNotFoundError(`Transaction not found: ${txHashes[0]}`)\n    }\n\n    return transactions.map((transaction) => normalizeTransaction(transaction))\n  }\n\n  async getBalance(addresses: (string | Address)[]): Promise<BigNumber> {\n    const promiseBalances = await Promise.all(\n      addresses.map(async (address) => {\n        try {\n          const publicKey = new PublicKey(addressToString(address))\n\n          const balance = await this.connection.getBalance(publicKey)\n\n          return new BigNumber(balance)\n        } catch (err) {\n          if (err?.message?.includes('does not exist while viewing')) {\n            return new BigNumber(0)\n          }\n          throw err\n        }\n      })\n    )\n\n    return promiseBalances\n      .map((balance) => new BigNumber(balance))\n      .reduce((acc, balance) => acc.plus(balance), new BigNumber(0))\n  }\n\n  async sendRawTransaction(rawTransaction: string): Promise<string> {\n    const wireTransaciton = Buffer.from(rawTransaction)\n    return await this.connection.sendRawTransaction(wireTransaciton)\n  }\n\n  async getRecentBlockhash() {\n    return this.connection.getRecentBlockhash()\n  }\n\n  async _getMinimumBalanceForRentExemption(dataLength: number): Promise<number> {\n    return await this.connection.getMinimumBalanceForRentExemption(dataLength)\n  }\n\n  async _sendTransaction(transaction: SolTransaction, accounts: Array<Signer>): Promise<string> {\n    return await this.connection.sendTransaction(transaction, accounts)\n  }\n\n  async _getAddressHistory(address: string): Promise<ConfirmedSignatureInfo[]> {\n    return await this.connection.getConfirmedSignaturesForAddress2(new PublicKey(addressToString(address)))\n  }\n\n  async _includeTransactions(blockNumber: number): Promise<Transaction[]> {\n    const confirmedSignatures = await this.connection.getConfirmedBlockSignatures(blockNumber)\n\n    const blockTransactions = confirmedSignatures.signatures.map((signature) => this.getTransactionByHash(signature))\n\n    return await Promise.all(blockTransactions)\n  }\n\n  async _deploy(signer: Keypair, bytecode: number[]): Promise<string> {\n    const programAccount = new Keypair()\n\n    await BpfLoader.load(this.connection, signer, programAccount, bytecode, BPF_LOADER_PROGRAM_ID)\n\n    return programAccount.publicKey.toString()\n  }\n\n  async _getAccountInfo(address: string): Promise<AccountInfo<Buffer>> {\n    return this.connection.getAccountInfo(new PublicKey(address))\n  }\n\n  async _waitForContractToBeExecutable(programId: string): Promise<boolean> {\n    return new Promise((resolve) => {\n      const interval = setInterval(async () => {\n        const accountInfo = await this._getAccountInfo(programId)\n\n        if (accountInfo.executable) {\n          clearInterval(interval)\n          resolve(true)\n        }\n      }, 5000)\n    })\n  }\n\n  async getFees(): Promise<FeeDetails> {\n    const { feeCalculator } = await this.getRecentBlockhash()\n    return {\n      slow: {\n        fee: feeCalculator.lamportsPerSignature\n      },\n      average: {\n        fee: feeCalculator.lamportsPerSignature\n      },\n      fast: {\n        fee: feeCalculator.lamportsPerSignature\n      }\n    }\n  }\n}\n","import SolanaRpcProvider from './SolanaRpcProvider'\nexport { SolanaRpcProvider }\n","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/node-provider\");","module.exports = require(\"@liquality/solana-utils\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"@solana/web3.js\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["network","baseURL","helperUrl","responseType","transformResponse","undefined","connection","Connection","nodeUrl","_network","generateBlock","numberOfBlocks","Promise","resolve","setTimeout","getBlockByHash","Error","getBlockByNumber","blockNumber","includeTx","this","getBlock","block","normalizedBlock","normalizeBlock","_includeTransactions","transactions","getBlockHeight","getSlot","getTransactionByHash","txHash","all","getParsedConfirmedTransaction","getSignatureStatus","searchTransactionHistory","tx","signatureStatus","TxNotFoundError","normalizeTransaction","getTransactionReceipt","txHashes","getParsedConfirmedTransactions","includes","map","transaction","getBalance","addresses","address","publicKey","PublicKey","addressToString","balance","BigNumber","message","reduce","acc","plus","sendRawTransaction","rawTransaction","wireTransaciton","Buffer","from","getRecentBlockhash","_getMinimumBalanceForRentExemption","dataLength","getMinimumBalanceForRentExemption","_sendTransaction","accounts","sendTransaction","_getAddressHistory","getConfirmedSignaturesForAddress2","getConfirmedBlockSignatures","confirmedSignatures","blockTransactions","signatures","signature","_deploy","signer","bytecode","programAccount","Keypair","BpfLoader","load","BPF_LOADER_PROGRAM_ID","toString","_getAccountInfo","getAccountInfo","_waitForContractToBeExecutable","programId","interval","setInterval","executable","clearInterval","getFees","slow","fee","feeCalculator","lamportsPerSignature","average","fast","NodeProvider","SolanaRpcProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}