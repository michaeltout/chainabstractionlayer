{"version":3,"file":"index.js","mappings":"y7DACA,aACA,SACA,SACA,SAEA,SAEA,cAIE,WAAYA,EAAuBC,GAAnC,MACE,cAAO,K,OACP,EAAKC,SAAWF,EAChB,EAAKG,OAASF,E,EAyHlB,OAhI+C,OAUvC,YAAAG,cAAN,SAAoBC,G,gGACE,SAAMC,KAAKC,UAAU,uBAAfD,CAAuCD,I,OAEjE,KAFMG,EAAc,UAGlB,MAAM,IAAI,EAAAC,gBAAgB,0BAA0BJ,EAAW,kBAGjE,MAAO,CAAP,EAAOG,MAAAA,OAAW,EAAXA,EAAaE,gBAGhB,YAAAC,aAAN,SAAmBC,EAAwBC,G,gGAKlC,OAJP,EAAAC,mBAAmBF,GAEbG,EAAkBT,KAAKU,4BAA4BJ,GAElD,GAAMN,KAAKC,UAAU,kBAAfD,CAAkC,CAC7CW,KAAM,CACJC,KAAM,CAACH,GACPF,IAAG,M,OAHP,MAAO,CAAP,EAAO,kBAQH,YAAAM,UAAN,SACEP,EACAQ,EACAV,G,kGAIA,OAFA,EAAAW,sBAAsBX,EAAQE,EAAWU,YAEzC,GAAMhB,KAAKiB,8BAA8BX,EAAYQ,I,OAEtC,OAFf,SAEe,GAAMd,KAAKC,UAAU,uBAAfD,CAAuCc,I,OAMxC,OANdI,EAAS,SAETC,EAAqBnB,KAAKoB,wBAAwBF,EAAOG,KAAKC,gBAAiB,CACnFC,MAAO,CAAEnB,OAAM,KAGG,GAAMJ,KAAKC,UAAU,kBAAfD,CAAkC,CAC1DW,KAAM,CACJC,KAAM,CAACO,O,OAIX,MAAO,CAAP,EANoB,kBAShB,YAAAK,WAAN,SAAiBlB,EAAwBQ,G,kGACvC,SAAMd,KAAKiB,8BAA8BX,EAAYQ,I,OAEtC,OAFf,SAEe,GAAMd,KAAKC,UAAU,uBAAfD,CAAuCc,I,OAMxC,OANdI,EAAS,SAETC,EAAqBnB,KAAKoB,wBAAwBF,EAAOG,KAAKC,gBAAiB,CACnFG,OAAQ,KAGU,GAAMzB,KAAKC,UAAU,kBAAfD,CAAkC,CAC1DW,KAAM,CACJC,KAAM,CAACO,O,OAIX,MAAO,CAAP,EANoB,kBAShB,YAAAO,SAAN,W,mEACE,MAAO,CAAP,EAAO,aAGH,YAAAT,8BAAN,SAAoCX,EAAwBQ,G,gGAG3C,OAFf,EAAAN,mBAAmBF,GAEJ,GAAMN,KAAKC,UAAU,uBAAfD,CAAuCc,I,OAE5D,KAFMI,EAAS,UAGb,MAAM,IAAI,EAAAf,gBAAgB,0BAA0BW,GAGtD,GAAI,EAAAa,UAAUT,GACZ,MAAM,IAAI,EAAAU,cAAc,uDAAuDV,EAAOW,KAAI,IAAIX,EAAOY,WAGvG,GAAIZ,EAAa,KAAU,SAAMlB,KAAKJ,SAASmC,OAC7C,MAAM,IAAI,EAAAH,cAAc,2CAA2CV,EAAe,QAGpF,IAAK,EAAAc,+BAA+B1B,EAAYY,EAAa,MAC3D,MAAM,IAAI,EAAAU,cAAc,iCAG1B,MAAO,CAAP,GAAO,WAGT,YAAAlB,4BAAA,SAA4BJ,G,MACpB2B,EAAUjC,KAAKC,UAAU,oBAAfD,GAER+B,EAAW/B,KAAKJ,SAAQ,OAEhC,OAAO,IAAI,EAAAsC,uBACTD,EACA,KACAF,EACA,CACEI,MAAO7B,EAAW8B,iBAClBC,OAAQ/B,EAAWgC,cACnBC,WAAYjC,EAAWiC,WACvBC,MAAOlC,EAAWkC,MAAMC,WACxBC,YAAapC,EAAWU,cACzB,MACEhB,KAAKH,QAASS,EAAWkC,MAAMC,WAAU,KAIhD,YAAArB,wBAAA,SAAwBE,EAAyBqB,GAC/C,IAAMV,EAAUjC,KAAKC,UAAU,oBAAfD,GAEhB,OAAO,IAAI,EAAA4C,mBAAmBX,EAASX,EAAiBqB,IAE5D,EAhIA,CAA+C,EAAAE,U,iMCR/C,gBACS,EAAAC,kBADF,W,QCAPC,EAAOC,QAAUC,QAAQ,sB,QCAzBF,EAAOC,QAAUC,QAAQ,wB,QCAzBF,EAAOC,QAAUC,QAAQ,2B,QCAzBF,EAAOC,QAAUC,QAAQ,qB,QCAzBF,EAAOC,QAAUC,QAAQ,2BCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,K","sources":["webpack://@liquality/terra-swap-provider/./lib/TerraSwapProvider.ts","webpack://@liquality/terra-swap-provider/./lib/index.ts","webpack://@liquality/terra-swap-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/terra-swap-provider/external commonjs \"@liquality/provider\"","webpack://@liquality/terra-swap-provider/external commonjs \"@liquality/terra-utils\"","webpack://@liquality/terra-swap-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/terra-swap-provider/external commonjs \"@terra-money/terra.js\"","webpack://@liquality/terra-swap-provider/webpack/bootstrap","webpack://@liquality/terra-swap-provider/webpack/startup"],"sourcesContent":["import { SwapParams, SwapProvider, terra, Transaction } from '@liquality/types'\nimport { Provider } from '@liquality/provider'\nimport { TxNotFoundError, StandardError } from '@liquality/errors'\nimport { validateSwapParams, doesTransactionMatchInitiation } from '@liquality/terra-utils'\nimport { validateSecretAndHash } from '@liquality/utils'\nimport { TerraNetwork } from '@liquality/terra-networks'\nimport { isTxError, MsgExecuteContract, MsgInstantiateContract } from '@terra-money/terra.js'\n\nexport default class TerraSwapProvider extends Provider implements Partial<SwapProvider> {\n  private _network: TerraNetwork\n  private _asset: string\n\n  constructor(network: TerraNetwork, asset: string) {\n    super()\n    this._network = network\n    this._asset = asset\n  }\n\n  async getSwapSecret(claimTxHash: string): Promise<string> {\n    const transaction = await this.getMethod('getTransactionByHash')(claimTxHash)\n\n    if (!transaction) {\n      throw new TxNotFoundError(`Transaction with hash: ${claimTxHash} was not found`)\n    }\n\n    return transaction?.secret\n  }\n\n  async initiateSwap(swapParams: SwapParams, fee: number): Promise<Transaction<terra.InputTransaction>> {\n    validateSwapParams(swapParams)\n\n    const initContractMsg = this._instantiateContractMessage(swapParams)\n\n    return await this.getMethod('sendTransaction')({\n      data: {\n        msgs: [initContractMsg],\n        fee\n      }\n    })\n  }\n\n  async claimSwap(\n    swapParams: SwapParams,\n    initiationTxHash: string,\n    secret: string\n  ): Promise<Transaction<terra.InputTransaction>> {\n    validateSecretAndHash(secret, swapParams.secretHash)\n\n    await this.verifyInitiateSwapTransaction(swapParams, initiationTxHash)\n\n    const initTx = await this.getMethod('getTransactionByHash')(initiationTxHash)\n\n    const executeContractMsg = this._executeContractMessage(initTx._raw.contractAddress, {\n      claim: { secret }\n    })\n\n    const transaction = await this.getMethod('sendTransaction')({\n      data: {\n        msgs: [executeContractMsg]\n      }\n    })\n\n    return transaction\n  }\n\n  async refundSwap(swapParams: SwapParams, initiationTxHash: string): Promise<Transaction<terra.InputTransaction>> {\n    await this.verifyInitiateSwapTransaction(swapParams, initiationTxHash)\n\n    const initTx = await this.getMethod('getTransactionByHash')(initiationTxHash)\n\n    const executeContractMsg = this._executeContractMessage(initTx._raw.contractAddress, {\n      refund: {}\n    })\n\n    const transaction = await this.getMethod('sendTransaction')({\n      data: {\n        msgs: [executeContractMsg]\n      }\n    })\n\n    return transaction\n  }\n\n  async fundSwap(): Promise<null> {\n    return null\n  }\n\n  async verifyInitiateSwapTransaction(swapParams: SwapParams, initiationTxHash: string): Promise<boolean> {\n    validateSwapParams(swapParams)\n\n    const initTx = await this.getMethod('getTransactionByHash')(initiationTxHash)\n\n    if (!initTx) {\n      throw new TxNotFoundError(`Transaction not found: ${initiationTxHash}`)\n    }\n\n    if (isTxError(initTx)) {\n      throw new StandardError(`Encountered an error while running the transaction: ${initTx.code} ${initTx.codespace}`)\n    }\n\n    if (initTx['_raw']['codeId'] !== this._network.codeId) {\n      throw new StandardError(`Transaction is from different template: ${initTx['codeId']}`)\n    }\n\n    if (!doesTransactionMatchInitiation(swapParams, initTx['_raw'])) {\n      throw new StandardError('Transactions are not matching')\n    }\n\n    return true\n  }\n\n  _instantiateContractMessage(swapParams: SwapParams): MsgInstantiateContract {\n    const address = this.getMethod('_getAccAddressKey')()\n\n    const { codeId } = this._network\n\n    return new MsgInstantiateContract(\n      address,\n      null,\n      codeId,\n      {\n        buyer: swapParams.recipientAddress,\n        seller: swapParams.refundAddress,\n        expiration: swapParams.expiration,\n        value: swapParams.value.toNumber(),\n        secret_hash: swapParams.secretHash\n      },\n      { [this._asset]: swapParams.value.toNumber() }\n    )\n  }\n\n  _executeContractMessage(contractAddress: string, method: any): MsgExecuteContract {\n    const address = this.getMethod('_getAccAddressKey')()\n\n    return new MsgExecuteContract(address, contractAddress, method)\n  }\n}\n","import TerraSwapProvider from './TerraSwapProvider'\nexport { TerraSwapProvider }\n","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/provider\");","module.exports = require(\"@liquality/terra-utils\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"@terra-money/terra.js\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["network","asset","_network","_asset","getSwapSecret","claimTxHash","this","getMethod","transaction","TxNotFoundError","secret","initiateSwap","swapParams","fee","validateSwapParams","initContractMsg","_instantiateContractMessage","data","msgs","claimSwap","initiationTxHash","validateSecretAndHash","secretHash","verifyInitiateSwapTransaction","initTx","executeContractMsg","_executeContractMessage","_raw","contractAddress","claim","refundSwap","refund","fundSwap","isTxError","StandardError","code","codespace","codeId","doesTransactionMatchInitiation","address","MsgInstantiateContract","buyer","recipientAddress","seller","refundAddress","expiration","value","toNumber","secret_hash","method","MsgExecuteContract","Provider","TerraSwapProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}