{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/solana-swap-find-provider/./lib/SolanaSwapFindProvider.ts","webpack://@liquality/solana-swap-find-provider/./lib/index.ts","webpack://@liquality/solana-swap-find-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/solana-swap-find-provider/external commonjs \"@liquality/provider\"","webpack://@liquality/solana-swap-find-provider/external commonjs \"@liquality/solana-utils\"","webpack://@liquality/solana-swap-find-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/solana-swap-find-provider/webpack/bootstrap","webpack://@liquality/solana-swap-find-provider/webpack/startup"],"sourcesContent":["import { SwapParams, SwapProvider, Transaction } from '@liquality/types'\nimport { Provider } from '@liquality/provider'\nimport { PendingTxError } from '@liquality/errors'\nimport { addressToString } from '@liquality/utils'\nimport { doesTransactionMatchInitiation, validateSwapParams, validateSecret } from '@liquality/solana-utils'\nimport { SolanaNetwork } from '@liquality/solana-networks'\n\nexport default class SolanaSwapFindProvider extends Provider implements Partial<SwapProvider> {\n  private _network: SolanaNetwork\n  private instructions = {\n    init: 0,\n    claim: 1,\n    refund: 2\n  }\n\n  constructor(network: SolanaNetwork) {\n    super()\n    this._network = network\n  }\n\n  async findInitiateSwapTransaction(swapParams: SwapParams): Promise<Transaction> {\n    validateSwapParams(swapParams)\n\n    const { programId } = this._network\n\n    return await this._findTransactionByAddress({\n      address: addressToString(programId),\n      swapParams,\n      instruction: this.instructions.init,\n      validation: doesTransactionMatchInitiation\n    })\n  }\n\n  async findClaimSwapTransaction(swapParams: SwapParams, initiationTxHash: string): Promise<Transaction> {\n    validateSwapParams(swapParams)\n\n    const [initTransaction] = await this.getMethod('getTransactionReceipt')([initiationTxHash])\n\n    if (!initTransaction) {\n      throw new PendingTxError(`Transaction receipt is not available: ${initiationTxHash}`)\n    }\n\n    const {\n      _raw: { programAccount }\n    } = initTransaction\n\n    return await this._findTransactionByAddress({\n      swapParams,\n      address: programAccount,\n      instruction: this.instructions.claim,\n      validation: validateSecret\n    })\n  }\n\n  async findRefundSwapTransaction(swapParams: SwapParams, initiationTxHash: string): Promise<Transaction> {\n    validateSwapParams(swapParams)\n\n    const [initTransaction] = await this.getMethod('getTransactionReceipt')([initiationTxHash])\n\n    if (!initTransaction) {\n      throw new PendingTxError(`Transaction receipt is not available: ${initiationTxHash}`)\n    }\n\n    const {\n      _raw: { programAccount }\n    } = initTransaction\n\n    return await this._findTransactionByAddress({\n      swapParams,\n      address: programAccount,\n      instruction: this.instructions.refund\n    })\n  }\n\n  async findFundSwapTransaction(): Promise<null> {\n    return null\n  }\n\n  _batchSignatures(addressHistory: [{ signature: string }]): string[][] {\n    const batches: string[][] = [[]]\n\n    let currentBatch = 0\n\n    const MAX_NUMBER_OF_REQUESTS = 100\n\n    addressHistory.forEach((pastTx: { signature: string }, idx: number) => {\n      if (idx && idx % MAX_NUMBER_OF_REQUESTS === 0) {\n        currentBatch++\n        batches.push([])\n      }\n\n      batches[currentBatch].push(pastTx.signature)\n    })\n\n    return batches\n  }\n\n  async _findTransactionByAddress({\n    address,\n    swapParams,\n    instruction,\n    validation\n  }: {\n    address: string\n    swapParams: SwapParams\n    instruction: number\n    validation?: (swapParams: SwapParams, transactionData: any | { secret: string }) => boolean\n  }): Promise<Transaction> {\n    const addressHistory = await this.getMethod('_getAddressHistory')(address)\n\n    const batch = this._batchSignatures(addressHistory)\n\n    const parsedTransactions = batch.map((sp) => this.getMethod('getTransactionReceipt')(sp))\n\n    const parsedTransactionsData = await Promise.all(parsedTransactions)\n\n    let initTransaction\n\n    for (let i = 0; i < parsedTransactionsData.length; i++) {\n      for (let j = 0; j < parsedTransactionsData[i].length; j++) {\n        const data = parsedTransactionsData[i][j]\n\n        if (data._raw?.instruction === instruction) {\n          if (instruction === this.instructions.refund) {\n            initTransaction = data\n            break\n          } else if (validation(swapParams, data._raw)) {\n            initTransaction = data\n            initTransaction.secret = data.secret\n            break\n          }\n        }\n      }\n\n      if (initTransaction) {\n        break\n      }\n    }\n\n    return initTransaction\n  }\n}\n","import SolanaSwapFindProvider from './SolanaSwapFindProvider'\nexport { SolanaSwapFindProvider }\n","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/provider\");","module.exports = require(\"@liquality/solana-utils\");","module.exports = require(\"@liquality/utils\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["network","instructions","init","claim","refund","_network","findInitiateSwapTransaction","swapParams","validateSwapParams","programId","this","_findTransactionByAddress","address","addressToString","instruction","validation","doesTransactionMatchInitiation","findClaimSwapTransaction","initiationTxHash","getMethod","initTransaction","PendingTxError","programAccount","validateSecret","findRefundSwapTransaction","findFundSwapTransaction","_batchSignatures","addressHistory","batches","currentBatch","forEach","pastTx","idx","push","signature","batch","parsedTransactions","map","sp","Promise","all","parsedTransactionsData","i","length","j","data","_raw","secret","Provider","SolanaSwapFindProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}