{"version":3,"file":"index.js","mappings":"y7DAAA,aACA,SAEA,cACE,WAAY,G,IAAA,aAAwD,GAAE,EAAxD,IAAAA,QAAAA,OAAO,IAAG,6BAA0B,EAAE,IAAAC,OAAAA,OAAM,IAAG,KAAE,E,OAC7D,YAAM,CAAED,QAAO,EAAEE,OAAQ,CAAED,OAAM,MAAK,KA0B1C,OA5BuD,OAK/C,YAAAE,QAAN,W,oGACmB,SAAMC,KAAKC,QAAQ,OAAQ,CAAEC,OAAQ,aAAcC,OAAQ,e,OAe5E,GAfMC,EAAW,SACTC,EAAWD,EAASE,KAAI,OAE1BC,EAAO,CACXC,KAAM,CACJC,IAAK,IAAI,EAAAC,UAAUL,EAAOM,cAAcC,YAE1CC,QAAS,CACPJ,IAAK,IAAI,EAAAC,UAAUL,EAAOS,iBAAiBF,YAE7CG,KAAM,CACJN,IAAK,IAAI,EAAAC,UAAUL,EAAOW,cAAcJ,aAIxCK,OAAOC,QAAQX,GAAMY,MAAK,SAAC,GAAY,OAAN,KAAUV,IAAM,OAEnD,MAAM,IAAIW,MAAM,gCAGlB,MAAO,CAAP,EAAOb,WAEX,EA5BA,CAAuD,EAAAc,c,yMCHvD,gBAES,EAAAC,0BAFF,W,QCAPpB,EAAOqB,QAAUC,QAAQ,6B,QCAzBtB,EAAOqB,QAAUC,QAAQ,sBCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAIrB,EAASuB,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAQ,EAAoBH,GAAUI,KAAK9B,EAAOqB,QAASrB,EAAQA,EAAOqB,QAASI,GAGpEzB,EAAOqB,QClBWI,CAAoB,K","sources":["webpack://@liquality/ethereum-gas-oracle-provider/./lib/EthereumGasOracleProvider.ts","webpack://@liquality/ethereum-gas-oracle-provider/./lib/index.ts","webpack://@liquality/ethereum-gas-oracle-provider/external commonjs \"@liquality/node-provider\"","webpack://@liquality/ethereum-gas-oracle-provider/external commonjs \"@liquality/types\"","webpack://@liquality/ethereum-gas-oracle-provider/webpack/bootstrap","webpack://@liquality/ethereum-gas-oracle-provider/webpack/startup"],"sourcesContent":["import { NodeProvider } from '@liquality/node-provider'\nimport { FeeProvider, FeeDetails, BigNumber } from '@liquality/types'\n\nexport default class EthereumGasOracleProvider extends NodeProvider implements FeeProvider {\n  constructor({ baseURL = 'https://api.etherscan.io', apikey = '' } = {}) {\n    super({ baseURL, params: { apikey } })\n  }\n\n  async getFees(): Promise<FeeDetails> {\n    const response = await this.nodeGet('/api', { module: 'gastracker', action: 'gasoracle' })\n    const { result } = response.data\n\n    const fees = {\n      slow: {\n        fee: new BigNumber(result.SafeGasPrice).toNumber()\n      },\n      average: {\n        fee: new BigNumber(result.ProposeGasPrice).toNumber()\n      },\n      fast: {\n        fee: new BigNumber(result.FastGasPrice).toNumber()\n      }\n    }\n\n    if (Object.entries(fees).find(([, fee]) => fee.fee > 1000)) {\n      // Guard against fees higher than 1000 GWEI\n      throw new Error('Fee over 1000 Gwei detected.')\n    }\n\n    return fees\n  }\n}\n","import EthereumGasOracleProvider from './EthereumGasOracleProvider'\n\nexport { EthereumGasOracleProvider }\n","module.exports = require(\"@liquality/node-provider\");","module.exports = require(\"@liquality/types\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["baseURL","apikey","params","getFees","this","nodeGet","module","action","response","result","data","fees","slow","fee","BigNumber","SafeGasPrice","toNumber","average","ProposeGasPrice","fast","FastGasPrice","Object","entries","find","Error","NodeProvider","EthereumGasOracleProvider","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}