{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@liquality/ethereum-rpc-provider/./lib/EthereumRpcProvider.ts","webpack://@liquality/ethereum-rpc-provider/./lib/index.ts","webpack://@liquality/ethereum-rpc-provider/external commonjs \"@liquality/crypto\"","webpack://@liquality/ethereum-rpc-provider/external commonjs \"@liquality/errors\"","webpack://@liquality/ethereum-rpc-provider/external commonjs \"@liquality/ethereum-utils\"","webpack://@liquality/ethereum-rpc-provider/external commonjs \"@liquality/jsonrpc-provider\"","webpack://@liquality/ethereum-rpc-provider/external commonjs \"@liquality/types\"","webpack://@liquality/ethereum-rpc-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/ethereum-rpc-provider/webpack/bootstrap","webpack://@liquality/ethereum-rpc-provider/webpack/startup"],"sourcesContent":["import { JsonRpcProvider } from '@liquality/jsonrpc-provider'\nimport {\n  numberToHex,\n  hexToNumber,\n  ensure0x,\n  normalizeTransactionObject,\n  remove0x,\n  buildTransaction\n} from '@liquality/ethereum-utils'\nimport {\n  Address,\n  Block,\n  ethereum,\n  SendOptions,\n  Transaction,\n  ChainProvider,\n  BigNumber,\n  TxStatus\n} from '@liquality/types'\nimport { sleep, addressToString } from '@liquality/utils'\nimport { InvalidDestinationAddressError, TxNotFoundError, BlockNotFoundError } from '@liquality/errors'\nimport { padHexStart } from '@liquality/crypto'\n\nconst GAS_LIMIT_MULTIPLIER = 1.5\n\nexport default class EthereumRpcProvider extends JsonRpcProvider implements Partial<ChainProvider> {\n  _usedAddressCache: { [key: string]: boolean }\n\n  constructor(options: { uri: string; username?: string; password?: string }) {\n    super(options.uri, options.username, options.password)\n    this._usedAddressCache = {}\n  }\n\n  async rpc<TResponse>(method: string, ...params: any[]): Promise<TResponse> {\n    const result = await this.jsonrpc(method, ...params)\n    return result\n  }\n\n  async getAddresses(): Promise<Address[]> {\n    const addresses = await this.rpc<string[]>('eth_accounts')\n\n    return addresses.map((address: string) => new Address({ address: remove0x(address) }))\n  }\n\n  async getUnusedAddress(): Promise<Address> {\n    const addresses = await this.getAddresses()\n\n    return addresses[0]\n  }\n\n  async getUsedAddresses(): Promise<Address[]> {\n    const addresses = await this.getAddresses()\n\n    return [addresses[0]]\n  }\n\n  async isWalletAvailable(): Promise<boolean> {\n    const addresses = await this.rpc<ethereum.Address[]>('eth_accounts')\n\n    return addresses.length > 0\n  }\n\n  async sendTransaction(options: SendOptions): Promise<Transaction<ethereum.PartialTransaction>> {\n    const addresses = await this.getAddresses()\n    const from = addresses[0].address\n\n    const txOptions: ethereum.UnsignedTransaction = {\n      from,\n      to: options.to ? addressToString(options.to) : (options.to as string),\n      value: options.value,\n      data: options.data\n    }\n    if (options.fee) txOptions.gasPrice = new BigNumber(options.fee)\n\n    const txData = buildTransaction(txOptions)\n    const gas = await this.estimateGas(txData)\n    txData.gas = numberToHex(gas)\n\n    const txHash = await this.rpc<ethereum.Hex>('eth_sendTransaction', txData)\n\n    const txWithHash: ethereum.PartialTransaction = {\n      ...txData,\n      input: txData.data,\n      hash: txHash\n    }\n\n    return normalizeTransactionObject(txWithHash)\n  }\n\n  async updateTransactionFee(tx: Transaction<ethereum.PartialTransaction> | string, newGasPrice: number) {\n    const txHash = typeof tx === 'string' ? tx : tx.hash\n    const transaction = await this.getTransactionByHash(txHash)\n\n    const txOptions: ethereum.UnsignedTransaction = {\n      from: transaction._raw.from,\n      to: transaction._raw.to,\n      value: new BigNumber(transaction._raw.value),\n      gasPrice: new BigNumber(newGasPrice),\n      data: transaction._raw.input,\n      nonce: hexToNumber(transaction._raw.nonce)\n    }\n\n    const txData = buildTransaction(txOptions)\n\n    const gas = await this.getMethod('estimateGas')(txData)\n    txData.gas = numberToHex(gas)\n\n    const newTxHash = await this.rpc<ethereum.Hex>('eth_sendTransaction', txData)\n\n    const txWithHash: ethereum.PartialTransaction = {\n      ...txData,\n      input: txData.data,\n      hash: newTxHash\n    }\n\n    return normalizeTransactionObject<ethereum.PartialTransaction>(txWithHash)\n  }\n\n  async sendRawTransaction(hash: string): Promise<string> {\n    return this.rpc('eth_sendRawTransaction', ensure0x(hash))\n  }\n\n  async signMessage(message: string, from?: string): Promise<string> {\n    from = ensure0x(from)\n    message = ensure0x(Buffer.from(message).toString('hex'))\n    const sig = await this.rpc<ethereum.Hex>('eth_sign', from, message)\n    return remove0x(sig)\n  }\n\n  normalizeBlock(block: ethereum.Block) {\n    const normalizedBlock: Block = {\n      hash: remove0x(block.hash),\n      parentHash: remove0x(block.parentHash),\n      timestamp: hexToNumber(block.timestamp),\n      size: hexToNumber(block.size),\n      number: hexToNumber(block.number),\n      difficulty: hexToNumber(block.difficulty)\n    }\n\n    if (block.nonce) {\n      normalizedBlock.nonce = hexToNumber(block.nonce)\n    }\n\n    return normalizedBlock\n  }\n\n  async parseBlock(block: ethereum.Block, includeTx: boolean): Promise<Block> {\n    const normalizedBlock = this.normalizeBlock(block)\n    if (block && includeTx) {\n      const currentHeight = await this.getBlockHeight()\n      normalizedBlock.transactions = block.transactions.map((tx: ethereum.Transaction) =>\n        normalizeTransactionObject(tx, currentHeight)\n      )\n    } else {\n      normalizedBlock.transactions = block.transactions\n    }\n    return normalizedBlock\n  }\n\n  async getBlockByHash(blockHash: string, includeTx = false): Promise<Block> {\n    const block = await this.rpc<ethereum.Block>('eth_getBlockByHash', ensure0x(blockHash), includeTx)\n    if (!block) {\n      throw new BlockNotFoundError(`Block not found: ${blockHash}`)\n    }\n\n    return this.parseBlock(block, includeTx)\n  }\n\n  async getBlockByNumber(blockNumber: number, includeTx = false): Promise<Block> {\n    const block = await this.rpc<ethereum.Block>('eth_getBlockByNumber', numberToHex(blockNumber), includeTx)\n\n    if (!block) {\n      throw new BlockNotFoundError(`Block not found: ${blockNumber}`)\n    }\n\n    return this.parseBlock(block, includeTx)\n  }\n\n  async getBlockHeight() {\n    const hexHeight = await this.rpc<ethereum.Hex>('eth_blockNumber')\n\n    return hexToNumber(hexHeight)\n  }\n\n  async getTransactionByHash(txHash: string) {\n    txHash = ensure0x(txHash)\n\n    const tx = await this.rpc<ethereum.Transaction>('eth_getTransactionByHash', txHash)\n    const currentBlock = await this.getBlockHeight()\n\n    if (!tx) {\n      throw new TxNotFoundError(`Transaction not found: ${txHash}`)\n    }\n\n    const txObj = normalizeTransactionObject(tx, currentBlock)\n\n    if (txObj.confirmations > 0) {\n      const receipt = await this.getTransactionReceipt(txHash)\n      txObj.status = Number(receipt.status) ? TxStatus.Success : TxStatus.Failed\n    } else {\n      txObj.status = TxStatus.Pending\n    }\n\n    return txObj\n  }\n\n  async getTransactionReceipt(txHash: string): Promise<ethereum.TransactionReceipt> {\n    txHash = ensure0x(txHash)\n    return this.rpc('eth_getTransactionReceipt', txHash)\n  }\n\n  async getTransactionCount(address: string, block = 'latest') {\n    address = ensure0x(address)\n\n    const count = await this.rpc<ethereum.Hex>('eth_getTransactionCount', address, block)\n\n    return hexToNumber(count)\n  }\n\n  async getGasPrice() {\n    const gasPrice = await this.rpc<ethereum.Hex>('eth_gasPrice')\n    return new BigNumber(gasPrice).div(1e9) // Gwei\n  }\n\n  async getBalance(_addresses: (Address | string)[]) {\n    const addresses = _addresses.map(addressToString).map(ensure0x)\n\n    const promiseBalances = await Promise.all(\n      addresses.map((address) => this.rpc<ethereum.Hex>('eth_getBalance', address, 'latest'))\n    )\n\n    return promiseBalances\n      .map((balance) => new BigNumber(balance))\n      .reduce((acc, balance) => acc.plus(balance), new BigNumber(0))\n  }\n\n  async estimateGas(transaction: ethereum.TransactionRequest) {\n    const result = await this.rpc<ethereum.Hex>('eth_estimateGas', transaction)\n    const gas = hexToNumber(result)\n    if (gas === 21000) return gas\n    return Math.ceil(gas * GAS_LIMIT_MULTIPLIER)\n  }\n\n  async getCode(address: string, block: string | number) {\n    address = ensure0x(String(address))\n    block = typeof block === 'number' ? ensure0x(padHexStart(block.toString(16))) : block\n    const code = await this.rpc<ethereum.Hex>('eth_getCode', address, block)\n    return remove0x(code)\n  }\n\n  async assertContractExists(address: string) {\n    const code = await this.getCode(address, 'latest')\n    if (code === '') throw new InvalidDestinationAddressError(`Contract does not exist at given address: ${address}`)\n  }\n\n  async stopMiner() {\n    await this.rpc('miner_stop')\n  }\n\n  async startMiner() {\n    await this.rpc('miner_start')\n  }\n\n  async evmMine() {\n    await this.rpc('evm_mine')\n  }\n\n  async generateBlock(numberOfBlocks: number) {\n    if (numberOfBlocks && numberOfBlocks > 1) {\n      throw new Error('Ethereum generation limited to 1 block at a time.')\n    }\n    try {\n      await this.evmMine()\n    } catch (e) {\n      // Fallback onto geth way of triggering mine\n      await this.startMiner()\n      await sleep(500) // Give node a chance to mine\n      await this.stopMiner()\n    }\n  }\n}\n","import EthereumRpcProvider from './EthereumRpcProvider'\n\nexport { EthereumRpcProvider }\n","module.exports = require(\"@liquality/crypto\");","module.exports = require(\"@liquality/errors\");","module.exports = require(\"@liquality/ethereum-utils\");","module.exports = require(\"@liquality/jsonrpc-provider\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["options","uri","username","password","_usedAddressCache","rpc","method","this","jsonrpc","params","getAddresses","map","address","Address","remove0x","getUnusedAddress","getUsedAddresses","isWalletAvailable","length","sendTransaction","addresses","from","txOptions","to","addressToString","value","data","fee","gasPrice","BigNumber","txData","buildTransaction","estimateGas","gas","numberToHex","txHash","txWithHash","input","hash","normalizeTransactionObject","updateTransactionFee","tx","newGasPrice","getTransactionByHash","transaction","_raw","nonce","hexToNumber","getMethod","newTxHash","sendRawTransaction","ensure0x","signMessage","message","Buffer","toString","sig","normalizeBlock","block","normalizedBlock","parentHash","timestamp","size","number","difficulty","parseBlock","includeTx","getBlockHeight","transactions","getBlockByHash","blockHash","BlockNotFoundError","getBlockByNumber","blockNumber","hexHeight","currentBlock","TxNotFoundError","txObj","confirmations","getTransactionReceipt","receipt","status","Number","TxStatus","Success","Failed","Pending","getTransactionCount","count","getGasPrice","div","getBalance","_addresses","Promise","all","balance","reduce","acc","plus","result","Math","ceil","getCode","String","padHexStart","code","assertContractExists","InvalidDestinationAddressError","stopMiner","startMiner","evmMine","generateBlock","numberOfBlocks","Error","sleep","JsonRpcProvider","EthereumRpcProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}