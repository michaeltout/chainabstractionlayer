{"version":3,"file":"index.js","mappings":"qnEAAA,aACA,SACA,SAEA,SAEA,YACA,SACA,SACA,SAcA,cAOE,WAAYA,GAAZ,WACUC,EAAsCD,EAAO,QAApCE,EAA6BF,EAAO,SAA1BG,EAAmBH,EAAO,e,OACrD,cAAM,CAAEC,QAAO,KAAG,MACbG,SAAWH,EAChB,EAAKI,UAAYH,EACjB,EAAKI,gBAAkBH,EACvB,EAAKI,cAAgB,G,EAqIzB,OAlJkD,OAgB1C,YAAAC,kBAAN,W,0FACoB,SAAMC,KAAKC,gB,OAC7B,MAAO,CAAP,EADkB,SACDC,OAAS,WAGtB,YAAAD,aAAN,W,kGACE,OAAID,KAAKF,cAAcE,KAAKJ,WACnB,CAAC,EAAD,CAACI,KAAKF,cAAcE,KAAKJ,aAGlB,GAAMI,KAAKG,c,OAU3B,OAVMC,EAAU,SAEVC,EAAS,IAAI,EAAAC,QAAQ,CACzBC,QAASH,EAAQI,UAAUC,WAC3BD,UAAWJ,EAAQI,UAAUC,WAC7Bf,eAAgBM,KAAKH,kBAGvBG,KAAKF,cAAcE,KAAKJ,WAAaS,EAE9B,CAAC,EAAD,CAACA,YAGJ,YAAAK,iBAAN,W,0FACoB,SAAMV,KAAKC,gB,OAC7B,MAAO,CAAP,EADkB,SACD,YAGb,YAAAU,iBAAN,W,mEACE,MAAO,CAAP,EAAOX,KAAKC,uBAGR,YAAAW,gBAAN,SAAsBrB,G,oHACpB,SAAMS,KAAKG,c,cAAX,SAEMU,EAAc,IAAI,cAEnBtB,EAAQuB,cAAiBvB,EAAQwB,GAAlC,MACgB,GAAMf,KAAKgB,UAAU,UAAfhB,CAA0BA,KAAKiB,QAAS1B,EAAQ2B,W,OAExE,OAFMC,EAAY,SAElB,GAAMnB,KAAKgB,UAAU,iCAAfhB,CAAiDmB,I,OAEvC,OAFhB,SAEgB,GAAMnB,KAAKgB,UAAU,qBAAfhB,CAAqCmB,I,OAEpD,OAFAC,EAAS,SAAqD,GAE9D,GAAMpB,KAAKgB,UAAU,wBAAfhB,CAAwC,CAACoB,EAAMC,a,OAA5D,MAAO,CAAP,EAAO,U,cACG9B,EAAQuB,aAAT,OACHC,EAAK,IAAI,EAAAO,UAAU,EAAAC,gBAAgBhC,EAAQwB,KAC3CS,EAAWC,OAAOlC,EAAQmC,OAEhC,KAAAb,GAAYc,IAAI,GAAM3B,KAAK4B,qBAAqBb,EAAIS,K,cAApD,WAAgB,W,aAEhBjC,EAAQuB,aAAae,SAAQ,SAACC,GAAgB,OAAAjB,EAAYc,IAAIG,M,iBAQnD,OALTC,EAAW,CAAC/B,KAAKiB,SACjB1B,EAAQwC,WACVA,EAAW,EAAH,CAAI/B,KAAKiB,SAAY1B,EAAQwC,WAG1B,GAAM/B,KAAKgB,UAAU,mBAAfhB,CAAmCa,EAAakB,I,QACnE,MAAO,CAAP,EAAO,CACLC,KAFW,SAGXN,OAAoB,QAAb,EAAAnC,EAAQmC,aAAK,eAAEO,aAAc,EACpCC,KAAM,aAIJ,YAAAC,YAAN,SAAkBC,G,kGAChB,SAAMpC,KAAKG,c,OAGX,OAHA,SACMkC,EAASC,OAAOC,KAAKH,GACrBf,EAAY,UAAKmB,KAAKC,SAASJ,EAAQ,EAAAK,OAAOC,OAAO,EAAAD,OAAOE,OAAO5C,KAAKiB,QAAQ4B,aAC/E,CAAP,EAAO,EAAAH,OAAOE,OAAOvB,YAGjB,YAAAyB,oBAAN,W,mEACE,MAAO,CAAP,EAAO9C,KAAKL,iBAGd,YAAAoD,aAAA,WACE,OAAO,GAGH,YAAAC,qBAAN,SAA2BzC,G,wGACP,SAAMP,KAAKC,gB,OAEA,OAFvBgD,EAAY,SAEW,GAAMC,QAAQC,IAAI,CAC7CnD,KAAKgB,UAAU,aAAfhB,CAA6BiD,GAC7BjD,KAAKgB,UAAU,qBAAfhB,M,OAKK,OAPD,EAAuB,SAAtBoD,EAAO,KAAEC,EAAS,KAKnBC,EAAOD,EAAUE,cAAcC,qBAE9B,GAAMxD,KAAKY,gBAAgB,CAChCG,GAAI,EAAAQ,gBAAgBhB,GACpBmB,MAAO0B,EAAQK,MAAMH,M,OAFvB,MAAO,CAAP,EAAO,kBAMH,YAAAI,gBAAN,SAAsBjE,G,gGACpB,IAAK,EAAAkE,iBAAiBlE,GACpB,MAAM,IAAImE,MAAM,sBAGL,SAAM,EAAAC,eAAepE,I,OAClC,OADMqE,EAAO,SACN,CAAP,EAAOxB,OAAOC,KAAKuB,GAAMrD,SAAS,gBAG9B,YAAAN,WAAN,W,iGACOH,KAAKiB,QAAN,MACF,GAAMjB,KAAK+D,c,OAAX,S,iBAGF,MAAO,CAAP,EAAO/D,KAAKiB,iBAGR,YAAAW,qBAAN,SAA2BoC,EAAsBxC,G,gGAChC,SAAMxB,KAAKG,c,OAC1B,OADM8D,EAAS,SACR,CAAP,EAAO,EAAAC,cAAcC,SAAS,CAC5BC,WAAYH,EAAOzD,UACnB6D,SAAUL,EACVxC,SAAQ,aAIN,YAAAuC,WAAN,W,oGACe,SAAM/D,KAAK0D,gBAAgB1D,KAAKJ,Y,cAAvCkE,EAAO,SACPQ,EAAc,EAAAC,WAAWvE,KAAKH,gBAAiBiE,GAAMU,IACrDpE,EAAU,EAAAqE,QAAQC,cAAc,UAAKlC,KAAKmC,QAAQC,SAASN,GAAazB,WAC9E7C,KAAKiB,QAAUb,E,YAEnB,EAlJA,CAAkD,EAAAyE,gB,oMCvBlD,gBACS,EAAAC,qBADF,W,QCAPC,EAAOC,QAAUC,QAAQ,sB,QCAzBF,EAAOC,QAAUC,QAAQ,qB,QCAzBF,EAAOC,QAAUC,QAAQ,qB,QCAzBF,EAAOC,QAAUC,QAAQ,+B,QCAzBF,EAAOC,QAAUC,QAAQ,oB,QCAzBF,EAAOC,QAAUC,QAAQ,U,QCAzBF,EAAOC,QAAUC,QAAQ,mB,QCAzBF,EAAOC,QAAUC,QAAQ,eCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,K","sources":["webpack://@liquality/solana-wallet-provider/./lib/SolanaWalletProvider.ts","webpack://@liquality/solana-wallet-provider/./lib/index.ts","webpack://@liquality/solana-wallet-provider/external commonjs \"@liquality/crypto\"","webpack://@liquality/solana-wallet-provider/external commonjs \"@liquality/types\"","webpack://@liquality/solana-wallet-provider/external commonjs \"@liquality/utils\"","webpack://@liquality/solana-wallet-provider/external commonjs \"@liquality/wallet-provider\"","webpack://@liquality/solana-wallet-provider/external commonjs \"@solana/web3.js\"","webpack://@liquality/solana-wallet-provider/external commonjs \"bip39\"","webpack://@liquality/solana-wallet-provider/external commonjs \"ed25519-hd-key\"","webpack://@liquality/solana-wallet-provider/external commonjs \"tweetnacl\"","webpack://@liquality/solana-wallet-provider/webpack/bootstrap","webpack://@liquality/solana-wallet-provider/webpack/startup"],"sourcesContent":["import { WalletProvider } from '@liquality/wallet-provider'\nimport { Address, Network, Transaction, solana } from '@liquality/types'\nimport { addressToString } from '@liquality/utils'\nimport { SolanaNetwork } from '@liquality/solana-networks'\nimport { base58 } from '@liquality/crypto'\n\nimport nacl from 'tweetnacl'\nimport { derivePath } from 'ed25519-hd-key'\nimport { validateMnemonic, mnemonicToSeed } from 'bip39'\nimport {\n  Keypair,\n  Transaction as SolTransaction,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction\n} from '@solana/web3.js'\n\ninterface SolanaWalletProviderOptions {\n  network: SolanaNetwork\n  mnemonic: string\n  derivationPath?: string\n}\n\nexport default class SolanaWalletProvider extends WalletProvider {\n  _network: SolanaNetwork\n  _mnemonic: string\n  _derivationPath: string\n  _addressCache: { [key: string]: Address }\n  _signer: Keypair\n\n  constructor(options: SolanaWalletProviderOptions) {\n    const { network, mnemonic, derivationPath } = options\n    super({ network })\n    this._network = network\n    this._mnemonic = mnemonic\n    this._derivationPath = derivationPath\n    this._addressCache = {}\n  }\n\n  async isWalletAvailable(): Promise<boolean> {\n    const addresses = await this.getAddresses()\n    return addresses.length > 0\n  }\n\n  async getAddresses(): Promise<Address[]> {\n    if (this._addressCache[this._mnemonic]) {\n      return [this._addressCache[this._mnemonic]]\n    }\n\n    const account = await this._getSigner()\n\n    const result = new Address({\n      address: account.publicKey.toString(),\n      publicKey: account.publicKey.toString(),\n      derivationPath: this._derivationPath\n    })\n\n    this._addressCache[this._mnemonic] = result\n\n    return [result]\n  }\n\n  async getUnusedAddress(): Promise<Address> {\n    const addresses = await this.getAddresses()\n    return addresses[0]\n  }\n\n  async getUsedAddresses(): Promise<Address[]> {\n    return this.getAddresses()\n  }\n\n  async sendTransaction(options: solana.SolanaSendOptions): Promise<Transaction> {\n    await this._getSigner()\n\n    const transaction = new SolTransaction()\n\n    if (!options.instructions && !options.to) {\n      const programId = await this.getMethod('_deploy')(this._signer, options.bytecode)\n\n      await this.getMethod('_waitForContractToBeExecutable')(programId)\n\n      const [final] = await this.getMethod('_getAddressHistory')(programId)\n\n      return await this.getMethod('getTransactionReceipt')([final.signature])\n    } else if (!options.instructions) {\n      const to = new PublicKey(addressToString(options.to))\n      const lamports = Number(options.value)\n\n      transaction.add(await this._sendBetweenAccounts(to, lamports))\n    } else {\n      options.instructions.forEach((instruction) => transaction.add(instruction))\n    }\n\n    let accounts = [this._signer]\n    if (options.accounts) {\n      accounts = [this._signer, ...options.accounts]\n    }\n\n    const hash = await this.getMethod('_sendTransaction')(transaction, accounts)\n    return {\n      hash,\n      value: options.value?.toNumber() || 0,\n      _raw: {}\n    }\n  }\n\n  async signMessage(message: string): Promise<string> {\n    await this._getSigner()\n    const buffer = Buffer.from(message)\n    const signature = nacl.sign.detached(buffer, base58.decode(base58.encode(this._signer.secretKey)))\n    return base58.encode(signature)\n  }\n\n  async getConnectedNetwork(): Promise<Network> {\n    return this._network\n  }\n\n  canUpdateFee(): boolean {\n    return false\n  }\n\n  async sendSweepTransaction(address: string | Address): Promise<Transaction> {\n    const addresses = await this.getAddresses()\n\n    const [balance, blockHash] = await Promise.all([\n      this.getMethod('getBalance')(addresses),\n      this.getMethod('getRecentBlockhash')()\n    ])\n\n    const _fee = blockHash.feeCalculator.lamportsPerSignature\n\n    return await this.sendTransaction({\n      to: addressToString(address),\n      value: balance.minus(_fee)\n    })\n  }\n\n  async _mnemonicToSeed(mnemonic: string) {\n    if (!validateMnemonic(mnemonic)) {\n      throw new Error('Invalid seed words')\n    }\n\n    const seed = await mnemonicToSeed(mnemonic)\n    return Buffer.from(seed).toString('hex')\n  }\n\n  async _getSigner(): Promise<Keypair> {\n    if (!this._signer) {\n      await this._setSigner()\n    }\n\n    return this._signer\n  }\n\n  async _sendBetweenAccounts(recipient: PublicKey, lamports: number): Promise<TransactionInstruction> {\n    const signer = await this._getSigner()\n    return SystemProgram.transfer({\n      fromPubkey: signer.publicKey,\n      toPubkey: recipient,\n      lamports\n    })\n  }\n\n  async _setSigner(): Promise<void> {\n    const seed = await this._mnemonicToSeed(this._mnemonic)\n    const derivedSeed = derivePath(this._derivationPath, seed).key\n    const account = Keypair.fromSecretKey(nacl.sign.keyPair.fromSeed(derivedSeed).secretKey)\n    this._signer = account\n  }\n}\n","import SolanaWalletProvider from './SolanaWalletProvider'\nexport { SolanaWalletProvider }\n","module.exports = require(\"@liquality/crypto\");","module.exports = require(\"@liquality/types\");","module.exports = require(\"@liquality/utils\");","module.exports = require(\"@liquality/wallet-provider\");","module.exports = require(\"@solana/web3.js\");","module.exports = require(\"bip39\");","module.exports = require(\"ed25519-hd-key\");","module.exports = require(\"tweetnacl\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(175);\n"],"names":["options","network","mnemonic","derivationPath","_network","_mnemonic","_derivationPath","_addressCache","isWalletAvailable","this","getAddresses","length","_getSigner","account","result","Address","address","publicKey","toString","getUnusedAddress","getUsedAddresses","sendTransaction","transaction","instructions","to","getMethod","_signer","bytecode","programId","final","signature","PublicKey","addressToString","lamports","Number","value","add","_sendBetweenAccounts","forEach","instruction","accounts","hash","toNumber","_raw","signMessage","message","buffer","Buffer","from","sign","detached","base58","decode","encode","secretKey","getConnectedNetwork","canUpdateFee","sendSweepTransaction","addresses","Promise","all","balance","blockHash","_fee","feeCalculator","lamportsPerSignature","minus","_mnemonicToSeed","validateMnemonic","Error","mnemonicToSeed","seed","_setSigner","recipient","signer","SystemProgram","transfer","fromPubkey","toPubkey","derivedSeed","derivePath","key","Keypair","fromSecretKey","keyPair","fromSeed","WalletProvider","SolanaWalletProvider","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}